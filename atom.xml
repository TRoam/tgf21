<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小光头禅院</title>
  
  <subtitle>一个想要成为技术牛人想要美好生活的小光头的禅悟。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.tgf21.com/"/>
  <updated>2018-12-10T10:11:50.272Z</updated>
  <id>http://www.tgf21.com/</id>
  
  <author>
    <name>Roam Tang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于GitHub/Webhook的简单自动化部署架构</title>
    <link href="http://www.tgf21.com/post/fc66e3c5.html"/>
    <id>http://www.tgf21.com/post/fc66e3c5.html</id>
    <published>2018-12-09T07:45:04.000Z</published>
    <updated>2018-12-10T10:11:50.272Z</updated>
    
    <content type="html"><![CDATA[<p>每次个人项目更新以后，都需要通过FTP将代码传到服务器，或者登录服务器上运行部署命令，个人的小项目，又不愿意安装Jenkins等复杂管理工具，能不能达到如下图的自动部署流程呢？</p><img src="/post/fc66e3c5/webhook.png"><a id="more"></a><blockquote><ul><li>当有更新时，<code>PUSH</code>代码到相应代码库</li><li>GitHub通知服务器，有更新啦！</li><li>服务器知道有更新以后，从代码库拉取代码</li><li>执行部署相关操作</li></ul></blockquote><h3 id="git-hooks-amp-Github-Webhook"><a href="#git-hooks-amp-Github-Webhook" class="headerlink" title="git hooks &amp; Github Webhook"></a>git hooks &amp; Github Webhook</h3><blockquote><p>Like many other Version Control Systems, Git has a way to fire off custom scripts when certain important actions occur. There are two groups of these hooks: client-side and server-side. Client-side hooks are triggered by operations such as committing and merging, while server-side hooks run on network operations such as receiving pushed commits. You can use these hooks for all sorts of reasons.</p></blockquote><p>如git官方文档所说，git提供了相应的钩子程序，能在特定的重要动作发生时触发自定义脚本程序。 有两组这样的钩子：客户端的和服务器端的。 客户端钩子由诸如提交和合并这样的操作所调用，而服务器端钩子作用于诸如接收被推送的提交这样的联网操作。 你可以随心所欲地运用这些钩子。</p><p>具体详细使用说明，可以参考文档<a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks" target="_blank" rel="noopener">Git Hooks</a>。</p><p>GitHub利用此特性提供了基于API的Webhooks服务，简单来说，就是可以向GitHub注册相应的钩子，当指定动作发生时，GitHub会向你注册的地址发送相应的请求，正好可以契合我的需求,在GitHub中,添加一个hook，配置十分简单： </p><img src="/post/fc66e3c5/hooks.png"><blockquote><p>在相应的仓库中，<code>setting --&gt; webhooks</code>， 所创建的hooks都会在此列出~</p></blockquote><img src="/post/fc66e3c5/hooks1.png"><blockquote><p>如上图，创建一个<code>webhook</code>, 需要一个能够接受Github发送过来信息的服务，如有需要，还可以设置相应的秘钥,那么我们也需要创建一个相应的服务。</p></blockquote><h3 id="Nodejs-创建webhook接口服务"><a href="#Nodejs-创建webhook接口服务" class="headerlink" title="Nodejs 创建webhook接口服务"></a>Nodejs 创建webhook接口服务</h3><p>上一步中，注册了一个push的hook，GitHub发送过来的消息大致是这样的，完整信息请参考<a href="https://developer.github.com/v3/activity/events/types/#pushevent" target="_blank" rel="noopener">官网</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // ...</span><br><span class="line">  "head_commit": null,</span><br><span class="line">  "repository": &#123;</span><br><span class="line">    "id": 135493233,</span><br><span class="line">    "node_id": "MDEwOlJlcG9zaXRvcnkxMzU0OTMyMzM=",</span><br><span class="line">    "name": "Hello-World",</span><br><span class="line">    "full_name": "Codertocat/Hello-World",</span><br><span class="line">    "owner": &#123;</span><br><span class="line">      "name": "Codertocat",</span><br><span class="line">      "email": "21031067+Codertocat@users.noreply.github.com",</span><br><span class="line">      "login": "Codertocat",</span><br><span class="line">      "id": 21031067,</span><br><span class="line">     // ...</span><br><span class="line">    &#125;,</span><br><span class="line">    "private": false,</span><br><span class="line">    "html_url": "https://github.com/Codertocat/Hello-World",</span><br><span class="line">    "description": null,</span><br><span class="line">    "fork": false,</span><br><span class="line">    "url": "https://github.com/Codertocat/Hello-World",</span><br><span class="line">    "forks_url": "https://api.github.com/repos/Codertocat/Hello-World/forks",</span><br><span class="line">    // ...</span><br></pre></td></tr></table></figure><p>使用node创建一个简单的服务，监听GitHub发送过来的action，并且根据信息做简单判别，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</span><br><span class="line"><span class="keyword">var</span> hostName = <span class="string">'127.0.0.1'</span>;</span><br><span class="line"><span class="keyword">var</span> port = <span class="number">8080</span>;</span><br><span class="line"></span><br><span class="line">app.all(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.header(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>);</span><br><span class="line">  res.header(</span><br><span class="line">    <span class="string">'Access-Control-Allow-Headers'</span>,</span><br><span class="line">    <span class="string">'Origin, X-Requested-With, Content-Type, Accept'</span></span><br><span class="line">  );</span><br><span class="line">  res.header(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'PUT,POST,GET,DELETE,OPTIONS'</span>);</span><br><span class="line">  res.header(<span class="string">'X-Powered-By'</span>, <span class="string">' 3.2.1'</span>);</span><br><span class="line">  res.header(<span class="string">'Content-Type'</span>, <span class="string">'application/json;charset=utf-8'</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/post'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'请求参数：'</span>, req.body);</span><br><span class="line">  <span class="keyword">if</span>(<span class="comment">/* 验证请求是来自GitHub的逻辑 */</span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(port, hostName, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`服务运行在http://<span class="subst">$&#123;hostName&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>启动上述服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure><p>当然，在服务器上，推荐使用<code>pm2</code>管理node服务，并且配置<code>nginx</code>统一域名端口负载等。</p><h3 id="利用exec执行部署"><a href="#利用exec执行部署" class="headerlink" title="利用exec执行部署"></a>利用<code>exec</code>执行部署</h3><p>好了，现在代码有了更新，服务器也知道得到了消息，接下来的工作就是，拉取目标代码，部署相应服务了。</p><h4 id="配置权限"><a href="#配置权限" class="headerlink" title="配置权限"></a>配置权限</h4><ul><li>创建web服务器用户目录,我使用的是<code>nginxUser</code>作为web访问用户，那么需要给这个用户添加相应的能够操作的权限。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /home/www/.ssh</span><br><span class="line">sudo chown -R nginxUser /home/www/.ssh</span><br></pre></td></tr></table></figure><ul><li>配置GIT SSH 公钥和私钥</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;liulangdewoniu@gmail.com&quot;</span><br></pre></td></tr></table></figure><ul><li>部署公钥</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -Hu nginxUser ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><ul><li><p>配置公钥到GitHub服务器，具体配置流程就不在这里详细说明了，可以参考<a href="https://help.github.com/articles/connecting-to-github-with-ssh/" target="_blank" rel="noopener">官方文档</a>。</p></li><li><p>给用户配置git信息</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo -Hu nginxUser git config --global credential.helper store</span><br><span class="line">sudo -Hu nginxUser git config --global user.name &quot;Roam&quot; </span><br><span class="line">sudo -Hu nginxUser git config --global user.email &quot;liulangdewoniu@gmail.com&quot;</span><br></pre></td></tr></table></figure><p>通过上面的配置，在服务器上，以<code>nginxuser</code>就有权限拉取对应GitHub仓库中的代码了</p><h4 id="拉取部署代码"><a href="#拉取部署代码" class="headerlink" title="拉取部署代码"></a>拉取部署代码</h4><p>当hook服务接收到有更新时，可以使用nodejs子进程，执行shell脚本，更新目标代码库中的代码，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;exec&#125; = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/post'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'请求参数：'</span>, req.body);</span><br><span class="line">  exec(</span><br><span class="line">      <span class="string">'cd /home/www/tgf21 &amp;&amp; git pull origin master'</span>,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">err, stdout, stderr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(err)</span><br><span class="line">          res.send(err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(stdout);</span><br><span class="line">        res.send(stdout);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当需要重启服务器，连接数据库等操作时，同样可以在<code>exec</code>中调用相应的shell脚本，此例子中就不做详细的讲述啦。</p><p>至此，我们一开始设想的步骤，完全达到了，从此只需要关心代码的更新，push代码就会自动的触发一系列的操作，将更新部署到我们的服务器上，肯定有同学说，不想每次push都部署怎么办？那就多设置几个分支呗！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每次个人项目更新以后，都需要通过FTP将代码传到服务器，或者登录服务器上运行部署命令，个人的小项目，又不愿意安装Jenkins等复杂管理工具，能不能达到如下图的自动部署流程呢？&lt;/p&gt;
&lt;img src=&quot;/post/fc66e3c5/webhook.png&quot;&gt;
    
    </summary>
    
    
      <category term="deploy" scheme="http://www.tgf21.com/tags/deploy/"/>
    
      <category term="linux" scheme="http://www.tgf21.com/tags/linux/"/>
    
      <category term="nodejs" scheme="http://www.tgf21.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Webpack-Dll(五) --- DllPlugin处理外部依赖</title>
    <link href="http://www.tgf21.com/post/36cda913.html"/>
    <id>http://www.tgf21.com/post/36cda913.html</id>
    <published>2018-12-02T07:40:04.000Z</published>
    <updated>2018-12-11T12:24:20.355Z</updated>
    
    <content type="html"><![CDATA[<p>我们可能已经遇到了这个问题，webpack已经区别出业务模块和公共模块的代码，为了利用浏览器缓存<br>我们也添加了hash，然而又有了这些问题： </p><blockquote><ul><li>每次打包，公共组件的hash都会变化，浏览器缓存形同虚设</li><li>打包时间越来越长，特别是在多页面应用的项目中</li></ul></blockquote><p>当然劳动人民的智慧是无限的，为了优化这些问题，可以从这些方面着手</p><blockquote><ul><li>公共模块等提出来单独打包，每次只打包业务模块</li><li>将打包出来的公共模块作为外部依赖重新引入</li></ul></blockquote><a id="more"></a><p>于是有了webpack的<a href="https://webpack.docschina.org/plugins/dll-plugin/" target="_blank" rel="noopener"><code>DllPlugin</code></a>，Dll这个概念应该是借鉴了Windows系统的dll。一个dll包，就是一个纯纯的依赖库，它本身不能运行，是用来给你的app引用的，打包dll的时候，Webpack会将所有包含的库做一个索引，写在一个manifest文件中，而引用dll的代码在打包的时候，只需要读取这个manifest文件，就可以了，这么一来好处可想而知。</p><blockquote><ul><li>Dll打包以后是独立存在的，只要其包含的库没有增减、升级，hash也不会变化，因此线上的dll代码不需要随着版本发布频繁更新。</li><li>App部分代码修改后，只需要编译app部分的代码，dll部分，只要包含的库没有增减、升级，就不需要重新打包。这样也大大提高了每次编译的速度。</li><li>假设你有多个项目，使用了相同的一些依赖库，它们就可以共用一个dll。</li></ul></blockquote><h3 id="增加第三方依赖配置文件"><a href="#增加第三方依赖配置文件" class="headerlink" title="增加第三方依赖配置文件"></a>增加第三方依赖配置文件</h3><p>将需要单独打包为dll的依赖专门列出来，在<code>vendor.js</code>中，如果不同环境，如dev prod需要不同的配置，那么也可以分开配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = [</span><br><span class="line">  <span class="string">'react'</span>,</span><br><span class="line">  <span class="string">'react-dom'</span>,</span><br><span class="line">  <span class="string">'lodash'</span>,</span><br><span class="line">  <span class="string">'antd'</span>,</span><br><span class="line">  <span class="string">'crypto-js'</span>,</span><br><span class="line">  <span class="string">'moment'</span>,</span><br><span class="line">  <span class="string">'fetch-mock'</span>,</span><br><span class="line">  <span class="string">'url'</span>,</span><br><span class="line">  <span class="string">'qs'</span>,</span><br><span class="line">  <span class="string">'postal'</span>,</span><br><span class="line">  <span class="string">'rc-calendar'</span>,</span><br><span class="line">  <span class="string">'rc-pagination'</span>,</span><br><span class="line">  <span class="string">'react-error-overlay'</span>,</span><br><span class="line">  <span class="string">'regenerator-runtime'</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="添加webpack-dll配置文件"><a href="#添加webpack-dll配置文件" class="headerlink" title="添加webpack dll配置文件"></a>添加webpack dll配置文件</h3><p>引入<code>vendor</code>， 并且将他们打包成一个单独的文件，当然生产的话别忘记了压缩和混淆。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vendors = <span class="built_in">require</span>(<span class="string">'./vendors'</span>);</span><br><span class="line"><span class="keyword">const</span> ROOT_PATH = path.resolve(__dirname);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> webpackConfig = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    vendors: vendors</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(ROOT_PATH, <span class="string">'../dll/prod'</span>),</span><br><span class="line">    filename: <span class="string">'vendors_[hash:8].js'</span>,</span><br><span class="line">    library: <span class="string">'vendors_[hash:8]'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env'</span>: &#123;</span><br><span class="line">        NODE_ENV: <span class="built_in">JSON</span>.stringify(<span class="string">'production'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      path: path.resolve(ROOT_PATH, <span class="string">'../dll/prod/vendors-manifest.json'</span>),</span><br><span class="line">      name: <span class="string">'vendors_[hash:8]'</span>,</span><br><span class="line">      context: __dirname</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">      parallel: <span class="literal">true</span>,</span><br><span class="line">      uglifyOptions: &#123;</span><br><span class="line">        compress: &#123;</span><br><span class="line">          warnings: <span class="literal">false</span>,</span><br><span class="line">          comparisons: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        mangle: &#123;</span><br><span class="line">          safari10: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        output: &#123;</span><br><span class="line">          comments: <span class="literal">false</span>,</span><br><span class="line">          ascii_only: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      sourceMap: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = webpackConfig;</span><br></pre></td></tr></table></figure><p>运行webpack，对它进行打包，可以看到，生成了两个文件,一个是vendor.js，一个就是manifest.json。<br>Webpack将每个库都进行了编号索引，之后的dll使用者可以读取这个文件，直接用id来引用。</p><h3 id="dll-使用者webpack配置"><a href="#dll-使用者webpack配置" class="headerlink" title="dll 使用者webpack配置"></a>dll 使用者webpack配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">    context: __dirname,</span><br><span class="line">    manifest: <span class="built_in">require</span>(<span class="string">'../dll/prod/vendors-manifest.json'</span>),</span><br><span class="line">  &#125;),</span><br><span class="line">]</span><br><span class="line"><span class="comment">// DllReferencePlugin的选项中，context需要跟之前保持一致，这个用来指导Webpack匹配manifest中库的路径；manifest用来引入刚才输出的manifest文件</span></span><br></pre></td></tr></table></figure><p>再次运行，明显感觉到，不仅速度快了，每个文件的体积也变小了，大功告成！！！</p><p>然而，每次运行都需要打包命令两次，如何继承到同样的一条命令呢？</p><blockquote><ul><li><a href="/post/c3fa870e.html">Webpack优化系列(一) – 性能分析可视化</a></li><li><a href="/post/3af31a87.html">Webpack优化系列(二) – Js&amp;css模块分离</a></li><li><a href="/post/1092a999.html">Webpack优化系列(三) — 公共模块与业务模块隔离</a></li><li><a href="/post/1092a999.html">Webpack优化系列(四) — 减肥:压缩和混淆代码</a></li><li><a href="/post/36cda913.html">Webpack-Dll(五) — DllPlugin处理外部依赖</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们可能已经遇到了这个问题，webpack已经区别出业务模块和公共模块的代码，为了利用浏览器缓存&lt;br&gt;我们也添加了hash，然而又有了这些问题： &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;每次打包，公共组件的hash都会变化，浏览器缓存形同虚设&lt;/li&gt;
&lt;li&gt;打包时间越来越长，特别是在多页面应用的项目中&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然劳动人民的智慧是无限的，为了优化这些问题，可以从这些方面着手&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;公共模块等提出来单独打包，每次只打包业务模块&lt;/li&gt;
&lt;li&gt;将打包出来的公共模块作为外部依赖重新引入&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.tgf21.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="webpack" scheme="http://www.tgf21.com/tags/webpack/"/>
    
      <category term="优化" scheme="http://www.tgf21.com/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Webpack优化系列(四) --- 减肥:压缩和混淆代码</title>
    <link href="http://www.tgf21.com/post/aa6507f5.html"/>
    <id>http://www.tgf21.com/post/aa6507f5.html</id>
    <published>2018-12-01T11:14:39.000Z</published>
    <updated>2018-12-11T12:24:10.785Z</updated>
    
    <content type="html"><![CDATA[<p>前面通过使用<code>CommonsChunkPlugin</code>插件，将公共模块与业务模块分开处理，但是打包输入的文件任然体积比较大，。<br>浏览器从服务器访问网页时，需要下载这些源文件，文件越大传输时间就越长。 为了提升网页加速速度和减少网络传输流量， 可以对这些资源进行压缩和混淆。 </p><p>除了通过GZIP以外，还可以对文件本身进行优化，提升网络速度，并且由于压缩后的代码可读性非常差 就算别人下载到网页的代码，也大大增加了代码分析和改造的难度。</p><p>Webpack中最常用的压缩和混淆的js插件就是<code>UglifyJsPlugin</code>，对css使用的比较多的工具则是<code>cssnano</code>。</p><a id="more"></a><h3 id="UglifyJsPlugin压缩js代码"><a href="#UglifyJsPlugin压缩js代码" class="headerlink" title="UglifyJsPlugin压缩js代码"></a><code>UglifyJsPlugin</code>压缩js代码</h3><p><code>UglifyJsPlugin</code>会分析JavaScript的代码语法树，理解代码含义，从而能做到诸如去掉无效代码，去掉日志输出代码，缩短变量名等优化</p><p>一般配置如下： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      compress: &#123;</span><br><span class="line">        <span class="comment">// 在UglifyJs删除没有用到的代码时不输出警告</span></span><br><span class="line">        warnings: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">// 删除所有的 `console` 语句，可以兼容ie浏览器</span></span><br><span class="line">        drop_console: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 内嵌定义了但是只用到一次的变量</span></span><br><span class="line">        collapse_vars: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 提取出出现多次但是没有定义成变量去引用的静态值</span></span><br><span class="line">        reduce_vars: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      output: &#123;</span><br><span class="line">        <span class="comment">// 最紧凑的输出</span></span><br><span class="line">        beautify: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">// 删除所有的注释</span></span><br><span class="line">        comments: <span class="literal">false</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>大概有以下常用配置项： </p><ul><li>sourceMap：是否为压缩后的代码生成对用的SourceMap， 默认不生成，开启后耗时会大大增加。一般不会把压缩后的代码SouceMap发送给网站用户的浏览器，而是用于内部开发人员调试线上代码时使用。</li><li>beautify：是否输出可读性较强的代码，会保留空格和制表符，默认为是，为了达到更好的压缩效果，可以设置为false。</li><li>comments：是否保留代码中的注释， 默认保留， 为了达到压缩更好的压缩效果，可以设置为false。</li><li>compress.warnings：是否在UglifyJS删除没有用到的代码时输出警告信息，默认为输出。可以设置为false以关闭这些不大的警告。</li><li>drop_console：是否剔除代码中所有的console语句，默认不剔除，开启后不仅可以提升代压缩效果，也可以兼容不支持console语句IE浏览器。</li><li>collapse_vars:是否内嵌定义了但是只永达一次的变量，例如把var x=5; y=x抓换成 y=5, 默认不转换。为了达到更好的压缩效果，可以设置为false。</li><li>reduce_vars：是否提取出出现多次但是没有定义成变量去引用的静态值。</li></ul><h3 id="cssnano压缩css"><a href="#cssnano压缩css" class="headerlink" title="cssnano压缩css"></a><code>cssnano</code>压缩css</h3><p>CSS同样可以进行瘦身和混淆，给予Postcss的css压缩工具<code>csssnano</code>能够理解css代码含义，去除不必要的规则等。<br>使用也是非常的简单，它已经在<code>css-loader</code>中内置了，只需要开启<code>minimize</code>选项，回顾前面对css优化的总结中，可以看到如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css/</span>,<span class="comment">// 增加对 CSS 文件的支持</span></span><br><span class="line">        <span class="comment">// 提取出 Chunk 中的 CSS 代码到单独的文件中</span></span><br><span class="line">        use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">          <span class="comment">// 通过 minimize 选项压缩 CSS 代码</span></span><br><span class="line">          use: [<span class="string">'css-loader?minimize'</span>]</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"> plugins: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">      filename: <span class="string">`[name]_[contenthash:8].css`</span>,<span class="comment">// 给输出的 CSS 文件名称加上 Hash 值</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">/// ...</span></span><br><span class="line">  ],</span><br></pre></td></tr></table></figure><p>至此，再看打包出来的文件，应该就达到预期了， 那么打包时间过长，每次开发都开始等的久了，并且每次打包hash都跟着变化，应该怎么优化呢?</p><blockquote><ul><li><a href="/post/c3fa870e.html">Webpack优化系列(一) – 性能分析可视化</a></li><li><a href="/post/3af31a87.html">Webpack优化系列(二) – Js&amp;css模块分离</a></li><li><a href="/post/1092a999.html">Webpack优化系列(三) — 公共模块与业务模块隔离</a></li><li><a href="/post/1092a999.html">Webpack优化系列(四) — 减肥:压缩和混淆代码</a></li><li><a href="/post/36cda913.html">Webpack-Dll(五) — DllPlugin处理外部依赖</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面通过使用&lt;code&gt;CommonsChunkPlugin&lt;/code&gt;插件，将公共模块与业务模块分开处理，但是打包输入的文件任然体积比较大，。&lt;br&gt;浏览器从服务器访问网页时，需要下载这些源文件，文件越大传输时间就越长。 为了提升网页加速速度和减少网络传输流量， 可以对这些资源进行压缩和混淆。 &lt;/p&gt;
&lt;p&gt;除了通过GZIP以外，还可以对文件本身进行优化，提升网络速度，并且由于压缩后的代码可读性非常差 就算别人下载到网页的代码，也大大增加了代码分析和改造的难度。&lt;/p&gt;
&lt;p&gt;Webpack中最常用的压缩和混淆的js插件就是&lt;code&gt;UglifyJsPlugin&lt;/code&gt;，对css使用的比较多的工具则是&lt;code&gt;cssnano&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.tgf21.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="webpack" scheme="http://www.tgf21.com/tags/webpack/"/>
    
      <category term="优化" scheme="http://www.tgf21.com/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Webpack优化系列(三) --- 公共模块与业务模块隔离</title>
    <link href="http://www.tgf21.com/post/1092a999.html"/>
    <id>http://www.tgf21.com/post/1092a999.html</id>
    <published>2018-12-01T05:55:12.000Z</published>
    <updated>2018-12-11T12:24:25.605Z</updated>
    
    <content type="html"><![CDATA[<p>在我们实际的项目中，模块大致可以分为业务相关的模块，以及公共基础模块，比如第三方的依赖模块（React， lodash， echart）等。<br>并不会常常更新，而且相对来说体积都比较大。如果和业务代码一起打包，不容易利用缓存。每次更新都引起重新打包和下载。<br>如果能够把公用模块和业务模块分开打包，那么对于性能来说，会有不小的提升。</p><p>webpack的<code>CommonsChunkPlugin</code>插件帮我们完美的解决了这个问题。<br><a id="more"></a></p><h3 id="CommonsChunkPlugin"><a href="#CommonsChunkPlugin" class="headerlink" title="CommonsChunkPlugin"></a>CommonsChunkPlugin</h3><p>设置公共模块入口：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">entry:&#123;</span><br><span class="line">    vendors:[<span class="string">'react'</span>,</span><br><span class="line">    <span class="string">'redux'</span>,</span><br><span class="line">    <span class="string">'react-dom'</span>,</span><br><span class="line">    <span class="string">'react-redux'</span>,</span><br><span class="line">    <span class="string">'react-router'</span>,</span><br><span class="line">    <span class="string">'antd/dist/antd.min.css'</span>,</span><br><span class="line">    <span class="string">'lodash'</span>],</span><br><span class="line">    <span class="comment">// other entries</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用<code>CommonsChunkPlugin</code>将公共模块过滤出来，并且打包成为一个单独的文件~</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">        name: <span class="string">'vendors'</span>, <span class="comment">// 入口名称</span></span><br><span class="line">        filename: <span class="string">'js/[name].js'</span>, <span class="comment">// 输入文件名称</span></span><br><span class="line">        warn:<span class="literal">false</span></span><br><span class="line">    &#125;)，</span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">        filename:<span class="string">'css/[name].css'</span>,</span><br><span class="line">        allChunks: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>重新打包，就得到分离出来的两个不同的出口文件了，然而，打包时间和体积都不小，并且编译过后会重新打包，这个又改如何优化呢？</p><blockquote><ul><li><a href="/post/c3fa870e.html">Webpack优化系列(一) – 性能分析可视化</a></li><li><a href="/post/3af31a87.html">Webpack优化系列(二) – Js&amp;css模块分离</a></li><li><a href="/post/1092a999.html">Webpack优化系列(三) — 公共模块与业务模块隔离</a></li><li><a href="/post/1092a999.html">Webpack优化系列(四) — 减肥:压缩和混淆代码</a></li><li><a href="/post/36cda913.html">Webpack-Dll(五) — DllPlugin处理外部依赖</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我们实际的项目中，模块大致可以分为业务相关的模块，以及公共基础模块，比如第三方的依赖模块（React， lodash， echart）等。&lt;br&gt;并不会常常更新，而且相对来说体积都比较大。如果和业务代码一起打包，不容易利用缓存。每次更新都引起重新打包和下载。&lt;br&gt;如果能够把公用模块和业务模块分开打包，那么对于性能来说，会有不小的提升。&lt;/p&gt;
&lt;p&gt;webpack的&lt;code&gt;CommonsChunkPlugin&lt;/code&gt;插件帮我们完美的解决了这个问题。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.tgf21.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="webpack" scheme="http://www.tgf21.com/tags/webpack/"/>
    
      <category term="优化" scheme="http://www.tgf21.com/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Linux Iptables 防火墙</title>
    <link href="http://www.tgf21.com/post/37a12b05.html"/>
    <id>http://www.tgf21.com/post/37a12b05.html</id>
    <published>2018-11-24T02:54:50.000Z</published>
    <updated>2018-12-03T03:00:25.245Z</updated>
    
    <content type="html"><![CDATA[<p>最近把服务器更新成了阿里云的Centos， 于是倒腾了系列防火墙的东东 ~~</p><p>Centos中默认的防火墙并不是iptables， 而是firewall，因此需要自己安装iptables服务。<br><a id="more"></a></p><h3 id="禁用原有的firewall服务"><a href="#禁用原有的firewall服务" class="headerlink" title="禁用原有的firewall服务"></a>禁用原有的<code>firewall</code>服务</h3><p>先查看<code>firewall</code>的状态</p><blockquote><p>systemctl status firewalld</p></blockquote><p>如果是active的话，关闭再禁用服务</p><blockquote><p>systemctl stop firewalld<br>systemctl disable firewalld </p></blockquote><h3 id="安装iptables"><a href="#安装iptables" class="headerlink" title="安装iptables"></a>安装iptables</h3><blockquote><p>yum install -y iptables-services</p></blockquote><p>启动服务</p><blockquote><p>systemctl enable iptables<br>systemctl start iptables<br>或者<br>service iptables start</p></blockquote><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><blockquote><p>启动指令:service iptables start<br>重启指令:service iptables restart<br>关闭指令:service iptables stop  </p></blockquote><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><blockquote><p>vim /etc/sysconfig/iptables  </p></blockquote><blockquote><p>然后进去修改即可，修改完了怎么办？这里很多人会想到/etc/rc.d/init.d/iptables save指令，但是一旦你这么干了你刚才的修改内容就白做了。。。<br>具体方法是：<br>只修改/etc/sysconfig/iptables 使其生效的办法是修改好后先service iptables restart，然后才调用/etc/rc.d/init.d/iptables save，<br>因为/etc/rc.d/init.d/iptables save会在iptables服务启动时重新加载，要是在重启之前直接先调用了/etc/rc.d/init.d/iptables save那么你<br>的/etc/sysconfig/iptables 配置就回滚到上次启动服务的配置了，这点必须注意！！！ </p></blockquote><h3 id="常见指令"><a href="#常见指令" class="headerlink" title="常见指令"></a>常见指令</h3><p>假设需要开发80端口，那么在配置文件中加入此条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -p tcp -m tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure><p>或者直接在命令行输入 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure><p>这条命令做了些什么呢？ </p><blockquote><p>-A：指定链名<br>-p：指定协议类型<br>-d：指定目标地址<br>–dport：指定目标端口（destination port 目的端口）<br>–sport：指定源端口（source port 源端口）<br>-j：指定动作类型  </p></blockquote><p>如果需要正对某个IP单独开放某端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果我需要对内网某机器单独开放mysql端口，应该如下配置：  </span><br><span class="line">iptables -A INPUT -s 192.168.2.1 -p tcp -m tcp --dport 3306 -j ACCEPT  </span><br><span class="line">iptables -A OUTPUT -d 192.168.2.1 -p tcp -m tcp --sport 3306 -j ACCEPT</span><br></pre></td></tr></table></figure><p>如果针对某IP进行全端口开放无限制:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -s 192.168.2.1/32 -j ACCEPT  </span><br><span class="line">-A OUTPUT -d 192.168.2.1/32 -j ACCEPT</span><br></pre></td></tr></table></figure></p><p>彻底禁止某IP访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#屏蔽单个IP的命令是  </span><br><span class="line">iptables -I INPUT -s 47.91.213.10 -j DROP  </span><br><span class="line">#封整个段即从123.0.0.1到123.255.255.254的命令  </span><br><span class="line">iptables -I INPUT -s 123.0.0.0/8 -j DROP  </span><br><span class="line">#封IP段即从123.45.0.1到123.45.255.254的命令  </span><br><span class="line">iptables -I INPUT -s 124.45.0.0/16 -j DROP  </span><br><span class="line">#封IP段即从123.45.6.1到123.45.6.254的命令是  </span><br><span class="line">iptables -I INPUT -s 123.45.6.0/24 -j DROP  </span><br><span class="line">指令I是insert指令 但是该指令会insert在正确位置并不像A指令看你自己的排序位置，因此用屏蔽因为必须在一开始就要加载屏蔽IP，所以必须使用I命令加载，然后注意执行/etc/rc.d/init.d/iptables save进行保存后重启服务即可</span><br></pre></td></tr></table></figure></p><h3 id="我自己的配置实例"><a href="#我自己的配置实例" class="headerlink" title="我自己的配置实例"></a>我自己的配置实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line">-A INPUT -p udp -m state --state NEW -m udp --dport 8989 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 8989 -j ACCEPT</span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -j ACCEPT</span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line">-A INPUT -s 127.0.0.1/32 -d 127.0.0.1/32 -j ACCEPT</span><br><span class="line">-A INPUT -s 192.168.2.200/32 -d 192.168.2.200/32 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m tcp --dport 22 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m tcp --dport 80 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m tcp --dport 3306 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m tcp --dport 11211 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m tcp --dport 11212 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m tcp --dport 53 -j ACCEPT</span><br><span class="line">-A INPUT -p udp -m udp --dport 53 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 8989 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 21 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 30000:30999 -j ACCEPT</span><br><span class="line">-A FORWARD -j REJECT --reject-with icmp-host-prohibited</span><br><span class="line">-A OUTPUT -p icmp -j ACCEPT</span><br><span class="line">-A OUTPUT -s 127.0.0.1/32 -d 127.0.0.1/32 -j ACCEPT</span><br><span class="line">-A OUTPUT -s 192.168.2.200/32 -d 192.168.2.200/32 -j ACCEPT</span><br><span class="line">-A OUTPUT -p tcp -m tcp --dport 22 -j ACCEPT</span><br><span class="line">-A OUTPUT -p tcp -m tcp --sport 22 -j ACCEPT</span><br><span class="line">-A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT</span><br><span class="line">-A OUTPUT -p tcp -m tcp --dport 53 -j ACCEPT</span><br><span class="line">-A OUTPUT -p udp -m udp --dport 53 -j ACCEPT</span><br><span class="line">-A OUTPUT -p tcp -m tcp --dport 465 -j ACCEPT</span><br><span class="line">-A OUTPUT -p tcp -m tcp --dport 25 -j ACCEPT</span><br><span class="line">-A OUTPUT -p tcp -m tcp --dport 110 -j ACCEPT</span><br><span class="line">-A OUTPUT -p tcp -m tcp --sport 80 -j ACCEPT</span><br><span class="line">-A OUTPUT -p tcp -m tcp --sport 3306 -j ACCEPT</span><br><span class="line">-A OUTPUT -p tcp -m tcp --sport 11211 -j ACCEPT</span><br><span class="line">-A OUTPUT -p tcp -m tcp --sport 11212 -j ACCEPT</span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近把服务器更新成了阿里云的Centos， 于是倒腾了系列防火墙的东东 ~~&lt;/p&gt;
&lt;p&gt;Centos中默认的防火墙并不是iptables， 而是firewall，因此需要自己安装iptables服务。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.tgf21.com/tags/Linux/"/>
    
      <category term="iptables" scheme="http://www.tgf21.com/tags/iptables/"/>
    
      <category term="防火墙" scheme="http://www.tgf21.com/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>Linux(centos) FTP 服务配置</title>
    <link href="http://www.tgf21.com/post/661c9634.html"/>
    <id>http://www.tgf21.com/post/661c9634.html</id>
    <published>2018-11-17T02:55:59.000Z</published>
    <updated>2018-12-10T08:03:25.513Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要把服务器从腾讯云，迁移到了阿里云（主要是阿里云11月的两折优惠啦），重新折腾了一下部署方式，启用服务器的FTP功能，做一个小记录。<br>Linux上最著名的FTP要数vsftpd了，小巧轻快，简单易用。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装vsftpd"><a href="#安装vsftpd" class="headerlink" title="安装vsftpd"></a>安装vsftpd</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">which vsftpd</span><br><span class="line"><span class="meta">#</span> /usr/bin/which: no vsftpd in (/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin)</span><br></pre></td></tr></table></figure><p>如上表示并没有找到任何vsftpd的，那么就运行一下命令安装~</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install vsftpd</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="设置开机启动服务"><a href="#设置开机启动服务" class="headerlink" title="设置开机启动服务"></a>设置开机启动服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable vsftpd.service</span><br></pre></td></tr></table></figure><h3 id="启动等相关命令"><a href="#启动等相关命令" class="headerlink" title="启动等相关命令"></a>启动等相关命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">service vsftpd start</span><br><span class="line"></span><br><span class="line">停止vsftpd:  service vsftpd stop</span><br><span class="line"></span><br><span class="line">重启vsftpd:  service vsftpd restart</span><br></pre></td></tr></table></figure><p>安装完后，有/etc/vsftpd/vsftpd.conf 文件，用来配置，还有新建了一个ftp用户和ftp的组，指向home目录为/var/ftp,默认是nologin（不能登录系统）</p><p>可以用下面命令查看用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure><h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><h3 id="安装客户端组件"><a href="#安装客户端组件" class="headerlink" title="安装客户端组件"></a>安装客户端组件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install ftp</span><br></pre></td></tr></table></figure><p>登录本地<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp localhost</span><br></pre></td></tr></table></figure></p><p>输入用户名，密码都可以，这里是运行匿名的，登录成功就表示FTP服务可以用了。</p><img src="/post/661c9634/ftp_log.png"><h3 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h3><p>以上步骤之后，说明ftp服务器可以用了，但是，外网还无法访问，这就是需要配置防火墙了。</p><p>FTP是<code>21</code>端口，系统并没有默认开启，打开并修改iptables配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure><p>添加这行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 21 -j ACCEPT</span><br></pre></td></tr></table></figure></p><p>然后重启iptables，再保存设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart</span><br><span class="line">service iptables save</span><br></pre></td></tr></table></figure><blockquote><p>一定要先重启再保存，具体原因请参照上一篇博文</p></blockquote><h3 id="配置FTP"><a href="#配置FTP" class="headerlink" title="配置FTP"></a>配置FTP</h3><p>打开FTP配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/vsftpd/vsftpd.conf</span><br></pre></td></tr></table></figure></p><h4 id="取消匿名登录"><a href="#取消匿名登录" class="headerlink" title="取消匿名登录"></a>取消匿名登录</h4><p>把第一行的 <code>anonymous_enable=YES</code> 改为 <code>NO</code>。<br>修改随后三行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chroot_list_enable=YES</span><br><span class="line"># (default follows)</span><br><span class="line">chroot_list_file=/etc/vsftpd/chroot_list</span><br></pre></td></tr></table></figure><p>再重启服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service vsftpd restart</span><br></pre></td></tr></table></figure></p><h3 id="增加用户ftpuser，指向目录特定目录-home-ftp-禁止登录SSH权限"><a href="#增加用户ftpuser，指向目录特定目录-home-ftp-禁止登录SSH权限" class="headerlink" title="增加用户ftpuser，指向目录特定目录/home/ftp,禁止登录SSH权限"></a>增加用户<code>ftpuser</code>，指向目录特定目录<code>/home/ftp</code>,禁止登录SSH权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -d /home/ftp -g ftp -s /sbin/nologin ftpuser</span><br></pre></td></tr></table></figure><p>设置口令 <code>passwd ftpuser</code>,编辑 <code>chroot_list</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/vsftpd/chroot_list</span><br></pre></td></tr></table></figure><p>每个用户一行，如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roam</span><br></pre></td></tr></table></figure></p><p>推荐使用centos的官方脚本管理： <a href="http://wiki.centos.org/HowTos/Chroot_Vsftpd_with_non-system_users" target="_blank" rel="noopener">http://wiki.centos.org/HowTos/Chroot_Vsftpd_with_non-system_users</a></p><h3 id="修改selinux"><a href="#修改selinux" class="headerlink" title="修改selinux"></a>修改selinux</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setsebool -P allow_ftpd_full_access 1   </span><br><span class="line"></span><br><span class="line">setsebool -P ftp_home_dir off 1</span><br><span class="line"></span><br><span class="line">service vsftpd restart</span><br></pre></td></tr></table></figure><h3 id="开启passive模式"><a href="#开启passive模式" class="headerlink" title="开启passive模式"></a>开启passive模式</h3><p>默认是开启的，但是要指定一个端口范围，打开vsftpd.conf文件，在后面加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pasv_min_port=30000   </span><br><span class="line">pasv_max_port=30999</span><br></pre></td></tr></table></figure><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><blockquote><p>500 OOPS: vsftpd: refusing to run with writable root inside chroot()</p></blockquote><p>解决方法： </p><p>在配置文件中加入： </p><p>allow_writeable_chroot=YES</p><blockquote><p>425 Failed to establish connection.</p></blockquote><p>解决，检查配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line">data_connection_timeout=120</span><br><span class="line">listen=NO</span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line">userlist_enable=YES</span><br><span class="line">tcp_wrappers=YES</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p tcp --destination-port 10000:10001 -j ACCEPT</span><br></pre></td></tr></table></figure><blockquote><p>The data connection could not be established: ETIMEDOUT - Connection attempt timed out</p></blockquote><p>加入配置： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pasv_enable=YES</span><br><span class="line">pasv_min_port=30000</span><br><span class="line">pasv_max_port=30999</span><br></pre></td></tr></table></figure><blockquote><p>用户名/密码 正确，并且其他配置没问题，仍然<code>530 Login incorrect</code></p></blockquote><p>应该是<code>pam.d/vsftpd</code>里面的问题<br>移除这一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth       required     pam_shells.so</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近需要把服务器从腾讯云，迁移到了阿里云（主要是阿里云11月的两折优惠啦），重新折腾了一下部署方式，启用服务器的FTP功能，做一个小记录。&lt;br&gt;Linux上最著名的FTP要数vsftpd了，小巧轻快，简单易用。&lt;/p&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;h3 id=&quot;安装vsftpd&quot;&gt;&lt;a href=&quot;#安装vsftpd&quot; class=&quot;headerlink&quot; title=&quot;安装vsftpd&quot;&gt;&lt;/a&gt;安装vsftpd&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;which vsftpd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt; /usr/bin/which: no vsftpd in (/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上表示并没有找到任何vsftpd的，那么就运行一下命令安装~&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install vsftpd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.tgf21.com/tags/Linux/"/>
    
      <category term="FTP" scheme="http://www.tgf21.com/tags/FTP/"/>
    
  </entry>
  
  <entry>
    <title>ShadowsocksR科学上网</title>
    <link href="http://www.tgf21.com/post/ff56cfee.html"/>
    <id>http://www.tgf21.com/post/ff56cfee.html</id>
    <published>2018-11-15T02:54:31.000Z</published>
    <updated>2018-12-03T08:11:45.668Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此文仅仅用于技术交流，科学的进行技术交流所用！！！</p></blockquote><p>之前一直使用国外的供应商的VPS，速度已经稳定率都非常的让人担忧。最近发现阿里爸爸提供了海外的ECS，经过测试之后，发现稳定性非常高，延迟维持在50ms以内。正好赶上双十一活动，毫不犹豫的入手了。<br>想着再次搭建自己SS VPN，便于学习科学技术，发现了以为大神的纯一键化脚本，简单好用，于是记录并且分享一下~~</p><blockquote><p>大神教程地址： <a href="https://doub.io/ss-jc42/" target="_blank" rel="noopener">https://doub.io/ss-jc42/</a> </p></blockquote><a id="more"></a><p>简单的说说步骤，想要详细解释清移步原文：</p><h3 id="安装Server"><a href="#安装Server" class="headerlink" title="安装Server"></a>安装Server</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure><p>然后一路按照自己的习惯往下走就行啦~</p><h3 id="服务端安装"><a href="#服务端安装" class="headerlink" title="服务端安装"></a>服务端安装</h3><p>以下网站，罗列了各种平台的版本与方法</p><blockquote><p><a href="https://ssr.tools/175" target="_blank" rel="noopener">https://ssr.tools/175</a></p></blockquote><h3 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h3><p>脚本会帮忙配置相关的防火墙，但是想要详细的了解，可以参考我这篇文章。</p><blockquote><p><a href="//2018/11/24/Linux防火墙小计/">Linux Iptables 防火墙</a></p></blockquote><h3 id="阿里云安全组配置"><a href="#阿里云安全组配置" class="headerlink" title="阿里云安全组配置"></a>阿里云安全组配置</h3><p>需要登录服务器控制台，在安全组中，添加相应的端口规则，这个可以详细参考官方文档，以下是简要步骤。</p><img src="/post/ff56cfee/WX20181201.png"><img src="/post/ff56cfee/WX20181202.png"><p>然后就可以开心的学习了！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;此文仅仅用于技术交流，科学的进行技术交流所用！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之前一直使用国外的供应商的VPS，速度已经稳定率都非常的让人担忧。最近发现阿里爸爸提供了海外的ECS，经过测试之后，发现稳定性非常高，延迟维持在50ms以内。正好赶上双十一活动，毫不犹豫的入手了。&lt;br&gt;想着再次搭建自己SS VPN，便于学习科学技术，发现了以为大神的纯一键化脚本，简单好用，于是记录并且分享一下~~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;大神教程地址： &lt;a href=&quot;https://doub.io/ss-jc42/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://doub.io/ss-jc42/&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="shadowsocks" scheme="http://www.tgf21.com/tags/shadowsocks/"/>
    
      <category term="software" scheme="http://www.tgf21.com/tags/software/"/>
    
  </entry>
  
  <entry>
    <title>Webpack优化系列(二) -- Js&amp;css模块分离</title>
    <link href="http://www.tgf21.com/post/3af31a87.html"/>
    <id>http://www.tgf21.com/post/3af31a87.html</id>
    <published>2018-10-27T02:53:40.000Z</published>
    <updated>2018-12-11T12:23:55.770Z</updated>
    
    <content type="html"><![CDATA[<p>Webpack将所有的静态资源都视为模块，比如JavaScript，scss，图片等，从而引入对应的loader去<br>加载相应的资源，并且处理成相应的模块。和大多数包管理器不一样的是，Webpack的加载器之间可以进行串联，一个加载器的输出可以成为另一个加载器的输入。</p><blockquote><p>如下图，Less资源首先通过<code>less-loader</code>模块加载器加载为css资源，然后通过<code>css-loader</code>模块加载器转化为css模块，最后再更加<code>style-loader</code>编译转化为适合特定浏览器的最终可适用样式资源。</p></blockquote><img src="/post/3af31a87/css-loader.png"><a id="more"></a><h2 id="常见loader"><a href="#常见loader" class="headerlink" title="常见loader"></a>常见loader</h2><p>一般我们项目中，常用的一些模块加载器包括。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install file-loader css-loader style-loader sass-loader html-loader babel-loader url-loader --save-dev</span><br></pre></td></tr></table></figure><p>在webpack中添加相关的配置: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.(js|mjs|jsx)$/</span>,</span><br><span class="line">enforce: <span class="string">'pre'</span>,</span><br><span class="line">use: [</span><br><span class="line">    &#123;</span><br><span class="line">    options: &#123;</span><br><span class="line">        formatter: <span class="built_in">require</span>.resolve(<span class="string">'react-dev-utils/eslintFormatter'</span>),</span><br><span class="line">        eslintPath: <span class="built_in">require</span>.resolve(<span class="string">'eslint'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    loader: <span class="built_in">require</span>.resolve(<span class="string">'eslint-loader'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    ],</span><br><span class="line">    include: paths.appSrc</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    test: [<span class="regexp">/\.bmp$/</span>, /\.gif$/, /\.jpe?g$/, /\.png$/],</span><br><span class="line">    loader: <span class="built_in">require</span>.resolve(<span class="string">'url-loader'</span>),</span><br><span class="line">    options: &#123;</span><br><span class="line">        limit: <span class="number">10000</span>,</span><br><span class="line">        name: <span class="string">'static/media/[name].[hash:8].[ext]'</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Exclude `js` files to keep "css" loader working as it injects</span></span><br><span class="line">    <span class="comment">// its runtime that would otherwise be processed through "file" loader.</span></span><br><span class="line">    <span class="comment">// Also exclude `html` and `json` extensions so they get processed</span></span><br><span class="line">    <span class="comment">// by webpacks internal loaders.</span></span><br><span class="line">    exclude: [<span class="regexp">/\.(js|mjs|jsx|ts|tsx)$/</span>, /\.html$/, /\.json$/],</span><br><span class="line">    loader: <span class="built_in">require</span>.resolve(<span class="string">'file-loader'</span>),</span><br><span class="line">    options: &#123;</span><br><span class="line">        name: <span class="string">'static/media/[name].[hash:8].[ext]'</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 其他规则类似，不在这一一列举</span></span><br></pre></td></tr></table></figure><p>随后，使用webpack打包，再看输出的文件，只有一个js文件以及几个图片大小超过10kb的图片，并没有打包出独立的css文件，所以:</p><ul><li>webpack 会把所有的资源都糅合打包成一个js文件，图片如果小于一定大小，会转化为base64的url</li><li>如果内容比较多，打包出来的js文件可能会非常大。</li></ul><p>当遇到大型项目的时候，这样做显然对性能会有一定的影响，那么如何优化呢？ </p><h2 id="mini-css-extract-plugin-分离css静态资源"><a href="#mini-css-extract-plugin-分离css静态资源" class="headerlink" title="mini-css-extract-plugin 分离css静态资源"></a>mini-css-extract-plugin 分离css静态资源</h2><p>在<code>webpack &lt; 4</code>版本中，使用<a href="https://github.com/webpack-contrib/extract-text-webpack-plugin" target="_blank" rel="noopener"><code>extract-text-webpack-plugin</code></a>, 4以上的版本，已经不推荐使用此插件处理css了。</p><blockquote><p>Since webpack v4 the extract-text-webpack-plugin should not be used for css. Use <a href="https://github.com/webpack-contrib/mini-css-extract-plugin" target="_blank" rel="noopener">mini-css-extract-plugin</a> instead.</p></blockquote><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev mini-css-extract-plugin</span><br></pre></td></tr></table></figure><p>配置webpack, 最简单的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">"mini-css-extract-plugin"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">"[name].css"</span>,</span><br><span class="line">      chunkFilename: <span class="string">"[id].css"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: MiniCssExtractPlugin.loader,</span><br><span class="line">            options: &#123;</span><br><span class="line">              <span class="comment">// you can specify a publicPath here</span></span><br><span class="line">              <span class="comment">// by default it use publicPath in webpackOptions.output</span></span><br><span class="line">              publicPath: <span class="string">'../'</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"css-loader"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要区别是开发或者生产环境： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">"mini-css-extract-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> devMode = process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      <span class="comment">// Options similar to the same options in webpackOptions.output</span></span><br><span class="line">      <span class="comment">// both options are optional</span></span><br><span class="line">      filename: devMode ? <span class="string">'[name].css'</span> : <span class="string">'[name].[hash].css'</span>,</span><br><span class="line">      chunkFilename: devMode ? <span class="string">'[id].css'</span> : <span class="string">'[id].[hash].css'</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(sa|sc|c)ss$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          devMode ? <span class="string">'style-loader'</span> : MiniCssExtractPlugin.loader,</span><br><span class="line">          <span class="string">'css-loader'</span>,</span><br><span class="line">          <span class="string">'postcss-loader'</span>,</span><br><span class="line">          <span class="string">'sass-loader'</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在生产环境，对css文件进行压缩和乱化：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">minimizer: [</span><br><span class="line">      <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">        cache: <span class="literal">true</span>,</span><br><span class="line">        parallel: <span class="literal">true</span>,</span><br><span class="line">        sourceMap: <span class="literal">true</span> <span class="comment">// set to true if you want JS source maps</span></span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123;&#125;)</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>当我们需要把所有的css都在一个文件时, 利用webpack splitChunks功能：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">"mini-css-extract-plugin"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        styles: &#123;</span><br><span class="line">          name: <span class="string">'styles'</span>,</span><br><span class="line">          test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">          chunks: <span class="string">'all'</span>,</span><br><span class="line">          enforce: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">"[name].css"</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          <span class="string">"css-loader"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次打包，会发现：</p><ul><li>css单独抽离，打包成单独的css文件</li><li>html自动引用css文件</li><li>小于10k的图片，转成base64 格式的 dataUrl</li></ul><h2 id="extract-text-webpack-plugin-分离css静态资源"><a href="#extract-text-webpack-plugin-分离css静态资源" class="headerlink" title="extract-text-webpack-plugin 分离css静态资源"></a>extract-text-webpack-plugin 分离css静态资源</h2><p>现阶段，很多项目，还是使用的是webpack@3 的版本，所以要完成上面的步骤，还是使用<code>extract-text-webpack-plugin</code> 插件的。</p><p>安装插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install extract-text-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><p>修改相关配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">var</span> extractCSS = <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'css/[name].css?[contenthash]'</span>)</span><br><span class="line"><span class="keyword">var</span> cssLoader = extractCSS.extract([<span class="string">'css'</span>])</span><br><span class="line"><span class="keyword">var</span> sassLoader = extractCSS.extract([<span class="string">'css'</span>, <span class="string">'sass'</span>])</span><br><span class="line"></span><br><span class="line">plugins.push(extractCSS);</span><br><span class="line">......</span><br><span class="line"><span class="comment">//conf - module - loaders</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css/</span>,<span class="comment">// 增加对 CSS 文件的支持</span></span><br><span class="line">        <span class="comment">// 提取出 Chunk 中的 CSS 代码到单独的文件中</span></span><br><span class="line">        loader: ExtractTextPlugin.extract(&#123;</span><br><span class="line">          <span class="comment">// 通过 minimize 选项压缩 CSS 代码</span></span><br><span class="line">          use: [<span class="string">'css-loader'</span>]</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.scss$/</span>, <span class="attr">loader</span>: sassLoader&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"> plugins: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">      filename: <span class="string">`[name]_[contenthash:8].css`</span>,<span class="comment">// 给输出的 CSS 文件名称加上 Hash 值</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">/// ...</span></span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><p>有写的不当之处，欢迎指正，谢谢~</p><blockquote><ul><li><a href="/post/c3fa870e.html">Webpack优化系列(一) – 性能分析可视化</a></li><li><a href="/post/3af31a87.html">Webpack优化系列(二) – Js&amp;css模块分离</a></li><li><a href="/post/1092a999.html">Webpack优化系列(三) — 公共模块与业务模块隔离</a></li><li><a href="/post/1092a999.html">Webpack优化系列(四) — 减肥:压缩和混淆代码</a></li><li><a href="/post/36cda913.html">Webpack-Dll(五) — DllPlugin处理外部依赖</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Webpack将所有的静态资源都视为模块，比如JavaScript，scss，图片等，从而引入对应的loader去&lt;br&gt;加载相应的资源，并且处理成相应的模块。和大多数包管理器不一样的是，Webpack的加载器之间可以进行串联，一个加载器的输出可以成为另一个加载器的输入。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如下图，Less资源首先通过&lt;code&gt;less-loader&lt;/code&gt;模块加载器加载为css资源，然后通过&lt;code&gt;css-loader&lt;/code&gt;模块加载器转化为css模块，最后再更加&lt;code&gt;style-loader&lt;/code&gt;编译转化为适合特定浏览器的最终可适用样式资源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&quot;/post/3af31a87/css-loader.png&quot;&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="http://www.tgf21.com/tags/webpack/"/>
    
      <category term="优化" scheme="http://www.tgf21.com/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="ExtractTextPlugin" scheme="http://www.tgf21.com/tags/ExtractTextPlugin/"/>
    
      <category term="MiniCssExtractPlugin" scheme="http://www.tgf21.com/tags/MiniCssExtractPlugin/"/>
    
  </entry>
  
  <entry>
    <title>Webpack优化系列(一) -- 性能分析可视化</title>
    <link href="http://www.tgf21.com/post/c3fa870e.html"/>
    <id>http://www.tgf21.com/post/c3fa870e.html</id>
    <published>2018-10-26T07:28:28.000Z</published>
    <updated>2018-12-11T12:24:33.615Z</updated>
    
    <content type="html"><![CDATA[<img src="/post/c3fa870e/ana.png"><p>最近觉得项目的打包速度异常的慢，于是利用webpack插件<code>webpack-bundle-analyzer</code>查看打包出来的各个模块的体积已经路径，寻找优化的方向，这里做简单的总结：</p><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-bundle-analyzer</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>webpack配置文件，添加环境变量判断，只有<code>BUILD_ANALYSIS=true</code>的时候：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> runReport = process.env.BUILD_ANALYSIS === <span class="string">'true'</span>;</span><br></pre></td></tr></table></figure><p>将插件加入配置中： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (runReport) &#123;</span><br><span class="line">  <span class="keyword">const</span> BundleAnalyzerPlugin = <span class="built_in">require</span>(<span class="string">'webpack-bundle-analyzer'</span>).BundleAnalyzerPlugin;</span><br><span class="line">  webpackConfigOptions.plugins.push(<span class="keyword">new</span> BundleAnalyzerPlugin());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行查看分析"><a href="#执行查看分析" class="headerlink" title="执行查看分析"></a>执行查看分析</h3><p>在命令行执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BUILD_ANALYSIS=true npm run build</span><br></pre></td></tr></table></figure><p>build截图，就可以看到我们最开始的那个分析网页了，可以点击查看具体的信息。</p><p>在<code>package.json</code>加入这个命令持久化： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"node scripts/start.js"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"node scripts/build.js"</span>,</span><br><span class="line">    <span class="string">"analysis"</span>: <span class="string">"BUILD_ANALYSIS=true npm run build"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>再次运行，就只需要： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run analysis</span><br></pre></td></tr></table></figure><h3 id="更多设置"><a href="#更多设置" class="headerlink" title="更多设置"></a>更多设置</h3><p>可以在插件中，添加自定义设置。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> BundleAnalyzerPlugin(&#123;</span><br><span class="line">  <span class="comment">//  可以是`server`，`static`或`disabled`。</span></span><br><span class="line">  <span class="comment">//  在`server`模式下，分析器将启动HTTP服务器来显示软件包报告。</span></span><br><span class="line">  <span class="comment">//  在“静态”模式下，会生成带有报告的单个HTML文件。</span></span><br><span class="line">  <span class="comment">//  在`disabled`模式下，你可以使用这个插件来将`generateStatsFile`设置为`true`来生成Webpack Stats JSON文件。</span></span><br><span class="line">  analyzerMode: <span class="string">'server'</span>,</span><br><span class="line">  <span class="comment">//  将在“服务器”模式下使用的主机启动HTTP服务器。</span></span><br><span class="line">  analyzerHost: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">  <span class="comment">//  将在“服务器”模式下使用的端口启动HTTP服务器。</span></span><br><span class="line">  analyzerPort: <span class="number">8888</span>, </span><br><span class="line">  <span class="comment">//  路径捆绑，将在`static`模式下生成的报告文件。</span></span><br><span class="line">  <span class="comment">//  相对于捆绑输出目录。</span></span><br><span class="line">  reportFilename: <span class="string">'report.html'</span>,</span><br><span class="line">  <span class="comment">//  模块大小默认显示在报告中。</span></span><br><span class="line">  <span class="comment">//  应该是`stat`，`parsed`或者`gzip`中的一个。</span></span><br><span class="line">  <span class="comment">//  有关更多信息，请参见“定义”一节。</span></span><br><span class="line">  defaultSizes: <span class="string">'parsed'</span>,</span><br><span class="line">  <span class="comment">//  在默认浏览器中自动打开报告</span></span><br><span class="line">  openAnalyzer: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">//  如果为true，则Webpack Stats JSON文件将在bundle输出目录中生成</span></span><br><span class="line">  generateStatsFile: <span class="literal">false</span>, </span><br><span class="line">  <span class="comment">//  如果`generateStatsFile`为`true`，将会生成Webpack Stats JSON文件的名字。</span></span><br><span class="line">  <span class="comment">//  相对于捆绑输出目录。</span></span><br><span class="line">  statsFilename: <span class="string">'stats.json'</span>,</span><br><span class="line">  <span class="comment">//  stats.toJson（）方法的选项。</span></span><br><span class="line">  <span class="comment">//  例如，您可以使用`source：false`选项排除统计文件中模块的来源。</span></span><br><span class="line">  <span class="comment">//  在这里查看更多选项：https：  //github.com/webpack/webpack/blob/webpack-1/lib/Stats.js#L21</span></span><br><span class="line">  statsOptions: <span class="literal">null</span>,</span><br><span class="line">  logLevel: <span class="string">'info'</span> 日志级别。可以是<span class="string">'信息'</span>，<span class="string">'警告'</span>，<span class="string">'错误'</span>或<span class="string">'沉默'</span>。</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>参考：<a href="https://github.com/webpack-contrib/webpack-bundle-analyzer" target="_blank" rel="noopener">webpack-bundle-analyzer</a></p><blockquote><ul><li><a href="/post/c3fa870e.html">Webpack优化系列(一) – 性能分析可视化</a></li><li><a href="/post/3af31a87.html">Webpack优化系列(二) – Js&amp;css模块分离</a></li><li><a href="/post/1092a999.html">Webpack优化系列(三) — 公共模块与业务模块隔离</a></li><li><a href="/post/1092a999.html">Webpack优化系列(四) — 减肥:压缩和混淆代码</a></li><li><a href="/post/36cda913.html">Webpack-Dll(五) — DllPlugin处理外部依赖</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/post/c3fa870e/ana.png&quot;&gt;
&lt;p&gt;最近觉得项目的打包速度异常的慢，于是利用webpack插件&lt;code&gt;webpack-bundle-analyzer&lt;/code&gt;查看打包出来的各个模块的体积已经路径，寻找优化的方向，这里做简单的总结：&lt;/p&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="http://www.tgf21.com/tags/webpack/"/>
    
      <category term="优化" scheme="http://www.tgf21.com/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="webpack-bundle-analyzer" scheme="http://www.tgf21.com/tags/webpack-bundle-analyzer/"/>
    
  </entry>
  
  <entry>
    <title>Webpack --- React多页应用</title>
    <link href="http://www.tgf21.com/post/ef9db4a8.html"/>
    <id>http://www.tgf21.com/post/ef9db4a8.html</id>
    <published>2018-10-21T02:49:13.000Z</published>
    <updated>2018-12-03T05:36:35.847Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>工作遇到这样的需求，相同的项目中，需要打包出多个单页应用，但是又希望能够在开发和维护中共享很多配置或者组件。<br>于是乎，使用 webpack 做了一些简单配置</p></blockquote><p>项目 tree 结构大致如下：</p><img src="/post/ef9db4a8/we.png"><p>预期目标是， 在<code>routes</code>目录下，每有一个文件夹，就代表一个独立的单页应用，也就是一个出口文件。</p><a id="more"></a><h3 id="更改-webpack-配置"><a href="#更改-webpack-配置" class="headerlink" title="更改 webpack 配置"></a>更改 webpack 配置</h3><p>获取 routes 列表</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> folderPath = path.resolve(fs.realpathSync(process.cwd()), <span class="string">'src/routes'</span>);</span><br><span class="line"><span class="keyword">const</span> getEntities = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> entries = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> plugins;</span><br><span class="line">  fs.readdirSync(folderPath).forEach(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> currentPath = <span class="string">`<span class="subst">$&#123;folderPath&#125;</span>/<span class="subst">$&#123;entry&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">const</span> cFolder = fs.statSync(currentPath);</span><br><span class="line">    <span class="keyword">if</span> (cFolder.isDirectory()) &#123;</span><br><span class="line">      <span class="comment">// some other logic</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; entries, plugins &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加entry， 也就是在上面code other logic里面, 把每个路由左右一个独立的入口文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">entires[entry] = [</span><br><span class="line">          <span class="string">'$&#123;currentPath&#125;/index.js'</span></span><br><span class="line">      ];</span><br></pre></td></tr></table></figure><p>借助 <code>webpack-html-plugin</code> 生成网页文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins.push(</span><br><span class="line">          <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            inject: <span class="literal">true</span>,</span><br><span class="line">            template: paths.appHtml,</span><br><span class="line">            chunks: [entry],</span><br><span class="line">            filename: <span class="string">`<span class="subst">$&#123;entry&#125;</span>.html`</span></span><br><span class="line">      &#125;))</span><br></pre></td></tr></table></figure><p>这样，准备工作就做好了，下面就需要让webpack知道我们上面所做的配置。<br>修改 webpack 入口：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; entries, plugins &#125; = getEntities();</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// other code</span></span><br><span class="line">  entry: entries</span><br><span class="line">  <span class="comment">// other code</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>将plugins加入到webpack的plugins里面：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// other code</span></span><br><span class="line">  plugins: [</span><br><span class="line">      ...plugins</span><br><span class="line">  ]</span><br><span class="line">  <span class="comment">// other code</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>重新build，在看看build文件夹，是不是就按照预想的输入呢？</p><blockquote><p>至此算是大功告成，但是这样的话，就会发现，每次更新的时候，速度变慢了很多。<br>这当然是情有可原的，毕竟之前只要打包一个出口文件，现在所有的东西，都是指数增长的，那么我们有什么办法可以提升打包和加载速度吗？<br>我们相信，webpack是异常强大的，至于如何做，在下一篇博客文章中，有详细介绍~</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;工作遇到这样的需求，相同的项目中，需要打包出多个单页应用，但是又希望能够在开发和维护中共享很多配置或者组件。&lt;br&gt;于是乎，使用 webpack 做了一些简单配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;项目 tree 结构大致如下：&lt;/p&gt;
&lt;img src=&quot;/post/ef9db4a8/we.png&quot;&gt;
&lt;p&gt;预期目标是， 在&lt;code&gt;routes&lt;/code&gt;目录下，每有一个文件夹，就代表一个独立的单页应用，也就是一个出口文件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.tgf21.com/tags/JavaScript/"/>
    
      <category term="React" scheme="http://www.tgf21.com/tags/React/"/>
    
      <category term="前端" scheme="http://www.tgf21.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="webpack" scheme="http://www.tgf21.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>博客评论工具Gitment实现原理探究</title>
    <link href="http://www.tgf21.com/post/b6db774d.html"/>
    <id>http://www.tgf21.com/post/b6db774d.html</id>
    <published>2018-02-08T07:46:38.000Z</published>
    <updated>2018-12-03T03:00:25.257Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近对博客又折腾了一轮，换了一个简洁一些的主题，并且对博客SEO和评论系统做了一些优化。<br>  之前的使用的是<a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a>作为评论系统，但是由于大家都懂的原因,在墙内无法访问，总是造成页面的持续lodaing。<br>  在多方面的对比下，选择了<a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">Giement</a>, 同时也对这个工具的实现做了一些研究。</p></blockquote><p>具体的安装和使用方法，我就不在这里赘述了，请参考作者<a href="https://github.com/imsun" target="_blank" rel="noopener">Shiquan Sun</a>的<a href="https://imsun.net/posts/gitment-introduction/" target="_blank" rel="noopener">说明文档</a>。<br>感谢作者的热心开发和共享，我主要从这些方面做了实现探究：</p><ul><li>基本原理与思想</li><li>评论区域的渲染</li><li>用户登陆</li><li>初始化评论</li><li>数据以及状态管理(Bobx)</li><li>创建评论</li><li>自定义主题的支持</li><li>点赞/删除/预览等功能的实现</li></ul><a id="more"></a><h3 id="基本原理与思想"><a href="#基本原理与思想" class="headerlink" title="基本原理与思想"></a>基本原理与思想</h3><p>主要利用了Github的issues功能，把每一篇文章当做是一个open的issue，然后读者评论其实就是给<br>特定issue添加回复。当然这一切都是通过api来实现的，用户登录和认证则是通过Github的OAuth以及<br>相关接口来实现的。 这种对github的使用，可谓精妙绝伦！</p><h3 id="评论区域的渲染"><a href="#评论区域的渲染" class="headerlink" title="评论区域的渲染"></a>评论区域的渲染</h3><p>从使用方式中来看，在每个博客页面，添加如下代码。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"container"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://imsun.github.io/gitment/style/default.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://imsun.github.io/gitment/dist/gitment.browser.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span><br><span class="line">  id: <span class="string">'页面 ID'</span>, <span class="comment">// 可选。默认为 location.href</span></span><br><span class="line">  owner: <span class="string">'你的 GitHub ID'</span>,</span><br><span class="line">  repo: <span class="string">'存储评论的 repo'</span>,</span><br><span class="line">  oauth: &#123;</span><br><span class="line">    client_id: <span class="string">'你的 client ID'</span>,</span><br><span class="line">    client_secret: <span class="string">'你的 client secret'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">gitment.render(<span class="string">'container'</span>)</span><br></pre></td></tr></table></figure><p>除去初始化，填写owner、repo、oauth等信息不提，大概分成两步走。</p><ol><li>创建一个Id为<code>container</code>的容器。</li><li>调用Gitment的<code>render</code>函数，并且将容器的ID告诉它。</li></ol><p>那么，<code>render</code> 函数到底做了什么呢，可以先来看看源代码，在<a href="https://github.com/imsun/gitment/blob/master/src/theme/default.js" target="_blank" rel="noopener">默认Theme</a>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">state, instance</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> container = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">  container.lang = <span class="string">"en-US"</span></span><br><span class="line">  container.className = <span class="string">'gitment-container gitment-root-container'</span></span><br><span class="line">  container.appendChild(instance.renderHeader(state, instance))</span><br><span class="line">  container.appendChild(instance.renderComments(state, instance))</span><br><span class="line">  container.appendChild(instance.renderEditor(state, instance))</span><br><span class="line">  container.appendChild(instance.renderFooter(state, instance))</span><br><span class="line">  <span class="keyword">return</span> container</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; render, renderHeader, renderComments, renderEditor, renderFooter &#125;</span><br></pre></td></tr></table></figure><p>暂时不去考虑这里的<code>Render</code>函数是如何加到Gitment Class的原型链上的，render大概做了这些事情：</p><img src="/post/b6db774d/2018-02-09_14-23-04.png"><p>具体的某一部分渲染，以render主题comments作为例子，详细看一下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderComments</span>(<span class="params">&#123; meta, comments, commentReactions, currentPage, user, error &#125;, instance</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> container = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  comments.forEach(<span class="function"><span class="params">comment</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> createDate = <span class="keyword">new</span> <span class="built_in">Date</span>(comment.created_at)</span><br><span class="line">    <span class="keyword">const</span> updateDate = <span class="keyword">new</span> <span class="built_in">Date</span>(comment.updated_at)</span><br><span class="line">    <span class="keyword">const</span> commentItem = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</span><br><span class="line">    commentItem.className = <span class="string">'gitment-comment'</span></span><br><span class="line">    commentItem.innerHTML = <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;a class="gitment-comment-avatar" href="<span class="subst">$&#123;comment.user.html_url&#125;</span>" target="_blank"&gt;</span></span><br><span class="line"><span class="string">        &lt;img class="gitment-comment-avatar-img" src="<span class="subst">$&#123;comment.user.avatar_url&#125;</span>"/&gt;</span></span><br><span class="line"><span class="string">      &lt;/a&gt;</span></span><br><span class="line"><span class="string">      &lt;div class="gitment-comment-main"&gt;</span></span><br><span class="line"><span class="string">        &lt;div class="gitment-comment-header"&gt;</span></span><br><span class="line"><span class="string">          &lt;a class="gitment-comment-name" href="<span class="subst">$&#123;comment.user.html_url&#125;</span>" target="_blank"&gt;</span></span><br><span class="line"><span class="string">            <span class="subst">$&#123;comment.user.login&#125;</span></span></span><br><span class="line"><span class="string">          &lt;/a&gt;</span></span><br><span class="line"><span class="string">  // ...</span></span><br><span class="line"><span class="string">     `</span></span><br><span class="line">       container.appendChild(pagination)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> container</span><br></pre></td></tr></table></figure><p>贴出了一部分代码，除去一些容错处理，大概就是:</p><ol><li>创建Root DOM 节点</li><li>根据传入的评论数据，循环并创建相应的HTML文本，并且将内容Append到创建的DOM节点上。</li><li>同时绑定相关事件，添加Like Vote等操作一系列其他操作</li><li>绘制分页等</li><li>再将创建的DOM 添加到Container上。 </li></ol><p>其他几部分的绘制，思想和实现大同小异，不再更加详细的在这里记录了。</p><h3 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h3><p>先看看代码吧。</p><p>获取登陆的LINK<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">get loginLink() &#123;</span><br><span class="line">    <span class="keyword">const</span> oauthUri = <span class="string">'https://github.com/login/oauth/authorize'</span></span><br><span class="line">    <span class="keyword">const</span> redirect_uri = <span class="keyword">this</span>.oauth.redirect_uri || <span class="built_in">window</span>.location.href</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> oauthParams = <span class="built_in">Object</span>.assign(&#123;</span><br><span class="line">      scope,</span><br><span class="line">      redirect_uri,</span><br><span class="line">    &#125;, <span class="keyword">this</span>.oauth)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;oauthUri&#125;</span><span class="subst">$&#123;Query.stringify(oauthParams)&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行登陆</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">login() &#123;</span><br><span class="line">  <span class="built_in">window</span>.location.href = <span class="keyword">this</span>.loginLink</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取用户信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.accessToken) &#123;</span><br><span class="line">  <span class="keyword">this</span>.logout()</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> http.get(<span class="string">'/user'</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.state.user = user</span><br><span class="line">    localStorage.setItem(LS_USER_KEY, <span class="built_in">JSON</span>.stringify(user))</span><br><span class="line">    <span class="keyword">return</span> user</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>基本就是利用OAuth，将Github作为IDP, 在GITHUB上注册的OAuth APP作为SP 的SSO了，具体相关内容不再这篇文章里面详述。<br>Gitment主要是将用户信息存入localstroage，再根据localstroy里面的信息去判断是否登录。</p><h3 id="初始化评论"><a href="#初始化评论" class="headerlink" title="初始化评论"></a>初始化评论</h3><p>在每一篇文章中，都需要作者登陆自己的账户，然后实行Comment 初始化动作，这是为什么呢，这一步都做了什么呢？<br>Gitment的基本思想就是将每一篇文章作为一个issue，显而易见，当一篇新的博文上线了以后，在GITHUB的项目里面并没有这一条issue，<br>由于issue的权限控制，只能又拥有者去创建，所以，必须本人登陆自己的账号，去创建一条open的issue了，实现中主要是以下代码。</p><p>先尝试load和文章关联的issue，如果没有，则显示ERROR。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">getIssue() &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state.meta.id) <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="keyword">this</span>.state.meta)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.loadMeta()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loadMeta() &#123;</span><br><span class="line"><span class="keyword">const</span> &#123; id, owner, repo &#125; = <span class="keyword">this</span></span><br><span class="line"><span class="keyword">return</span> http.get(<span class="string">`/repos/<span class="subst">$&#123;owner&#125;</span>/<span class="subst">$&#123;repo&#125;</span>/issues`</span>, &#123;</span><br><span class="line">    creator: owner,</span><br><span class="line">    labels: id,</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">issues</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!issues.length) <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(NOT_INITIALIZED_ERROR)</span><br><span class="line">    <span class="keyword">this</span>.state.meta = issues[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> issues[<span class="number">0</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Owner主动创建issue。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">createIssue() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; id, owner, repo, title, link, desc, labels &#125; = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> http.post(<span class="string">`/repos/<span class="subst">$&#123;owner&#125;</span>/<span class="subst">$&#123;repo&#125;</span>/issues`</span>, &#123;</span><br><span class="line">    title,</span><br><span class="line">    labels: labels.concat([<span class="string">'gitment'</span>, id]),</span><br><span class="line">    body: <span class="string">`<span class="subst">$&#123;link&#125;</span>\n\n<span class="subst">$&#123;desc&#125;</span>`</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">meta</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.state.meta = meta</span><br><span class="line">      <span class="keyword">return</span> meta</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="数据以及状态管理-Mobx"><a href="#数据以及状态管理-Mobx" class="headerlink" title="数据以及状态管理(Mobx)"></a>数据以及状态管理(Mobx)</h3><p>数据的载入和更新也是比较简单的，使用Mobx作为状态管理工具，在构造函数里，判断是否是分页，在根据分页信息，<br>调用<code>update</code>函数，更新数据！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">update() &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">Promise</span>.all([<span class="keyword">this</span>.loadMeta(), <span class="keyword">this</span>.loadUserInfo()])</span><br><span class="line">     .then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.all([</span><br><span class="line">       <span class="keyword">this</span>.loadComments().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.loadCommentReactions()),</span><br><span class="line">       <span class="keyword">this</span>.loadReactions(),</span><br><span class="line">     ]))</span><br><span class="line">     .catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="keyword">this</span>.state.error = e)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>关于状态管理和更新等，不做详细解释，有兴趣可以去查看<a href="https://mobx.js.org/getting-started.html" target="_blank" rel="noopener">MOBX</a>.</p><h3 id="创建评论"><a href="#创建评论" class="headerlink" title="创建评论"></a>创建评论</h3><p>通过API创建评论：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">post(body) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>.getIssue()</span><br><span class="line">     .then(<span class="function"><span class="params">issue</span> =&gt;</span> http.post(issue.comments_url, &#123; body &#125;, <span class="string">''</span>))</span><br><span class="line">     .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">this</span>.state.meta.comments++</span><br><span class="line">       <span class="keyword">const</span> pageCount = <span class="built_in">Math</span>.ceil(<span class="keyword">this</span>.state.meta.comments / <span class="keyword">this</span>.perPage)</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>.state.currentPage === pageCount) &#123;</span><br><span class="line">         <span class="keyword">this</span>.state.comments.push(data)</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> data</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="自定义主题的支持"><a href="#自定义主题的支持" class="headerlink" title="自定义主题的支持"></a>自定义主题的支持</h3><p> Gitment的实现，将Class数据等交互操作和页面渲染，做了非常松的耦合，非常便于使用者开发自己的Theme。<br> 具体实现是这样的，提供使用对应Theme的借口。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> useTheme(theme = &#123;&#125;) &#123;</span><br><span class="line">  <span class="keyword">this</span>.theme = theme</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> renderers = <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.theme)</span><br><span class="line">  renderers.forEach(<span class="function"><span class="params">renderer</span> =&gt;</span> extendRenderer(<span class="keyword">this</span>, renderer))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 从Default theme中，可以看到，export这些：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; render, renderHeader, renderComments, renderEditor, renderFooter &#125;</span><br></pre></td></tr></table></figure><p> 再讲这些Theme的方法，一个个加入到Gitment的Instance上。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">extendRenderer</span>(<span class="params">instance, renderer</span>) </span>&#123;</span><br><span class="line">  instance[renderer] = <span class="function">(<span class="params">container</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> targetContainer = getTargetContainer(container)</span><br><span class="line">    <span class="keyword">const</span> render = instance.theme[renderer] || instance.defaultTheme[renderer]</span><br><span class="line"></span><br><span class="line">    autorun(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> e = render(instance.state, instance)</span><br><span class="line">      <span class="keyword">if</span> (targetContainer.firstChild) &#123;</span><br><span class="line">        targetContainer.replaceChild(e, targetContainer.firstChild)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        targetContainer.appendChild(e)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> targetContainer</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 非常方便的实现了主题绘制和数据的分离，赞！</p><h3 id="点赞-删除-预览等功能的实现"><a href="#点赞-删除-预览等功能的实现" class="headerlink" title="点赞/删除/预览等功能的实现"></a>点赞/删除/预览等功能的实现</h3><p> 还有一些例如 lIke Vote 等操作，大同小异，并没有太多的技术含量，不做过多的描述，当然MARKDOWN的支持和预览可以有一些探讨，<br> 但是并不想在这里深入。</p><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>Gitment非常巧妙的利用了GITHUB的一些功能，以及他的设计与实现，对我启发也比较大，如何发散思维，利用现有的轮子做更多的事情，<br>真的非常值得学习和思考。</p><blockquote><p>以上都是个人见解，如有错误和不妥之处，非常欢迎指正，谢谢！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近对博客又折腾了一轮，换了一个简洁一些的主题，并且对博客SEO和评论系统做了一些优化。&lt;br&gt;  之前的使用的是&lt;a href=&quot;https://disqus.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Disqus&lt;/a&gt;作为评论系统，但是由于大家都懂的原因,在墙内无法访问，总是造成页面的持续lodaing。&lt;br&gt;  在多方面的对比下，选择了&lt;a href=&quot;https://github.com/imsun/gitment&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Giement&lt;/a&gt;, 同时也对这个工具的实现做了一些研究。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;具体的安装和使用方法，我就不在这里赘述了，请参考作者&lt;a href=&quot;https://github.com/imsun&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Shiquan Sun&lt;/a&gt;的&lt;a href=&quot;https://imsun.net/posts/gitment-introduction/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;说明文档&lt;/a&gt;。&lt;br&gt;感谢作者的热心开发和共享，我主要从这些方面做了实现探究：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本原理与思想&lt;/li&gt;
&lt;li&gt;评论区域的渲染&lt;/li&gt;
&lt;li&gt;用户登陆&lt;/li&gt;
&lt;li&gt;初始化评论&lt;/li&gt;
&lt;li&gt;数据以及状态管理(Bobx)&lt;/li&gt;
&lt;li&gt;创建评论&lt;/li&gt;
&lt;li&gt;自定义主题的支持&lt;/li&gt;
&lt;li&gt;点赞/删除/预览等功能的实现&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="gitment" scheme="http://www.tgf21.com/tags/gitment/"/>
    
      <category term="comment" scheme="http://www.tgf21.com/tags/comment/"/>
    
      <category term="OAuth" scheme="http://www.tgf21.com/tags/OAuth/"/>
    
  </entry>
  
  <entry>
    <title>2018年初雪的碎碎念</title>
    <link href="http://www.tgf21.com/post/a5ae4cf8.html"/>
    <id>http://www.tgf21.com/post/a5ae4cf8.html</id>
    <published>2018-02-03T03:06:13.000Z</published>
    <updated>2018-12-03T03:00:25.239Z</updated>
    
    <content type="html"><![CDATA[<p>时光飞逝，光阴冉冉，前几天迎来了2018年的第一场雪，这在上海异常的难得，看着窗外雪白的世界，心瞬间平静了很多，思绪也有机会开始飞扬开始整理！</p><p>不知不觉间，来上海已经八个年头了，四年大学 四年工作，这些年日里，人生发生了翻天覆地的变化。</p><p>我不再是一个什么都不懂，啥事都需要问父母的孩子了</p><p>我不再是能不想任何事，只读圣贤书的书生了</p><p>我也不再是孤身拼搏，上海飘零的单身汉子了</p><p>我完成了大学的学业走向工作的岗位， 成为了社会的一颗螺丝钉，懂得责任和担当。</p><a id="more"></a><p>我认识一群可爱的朋友和同事，互相帮助共同进步，学会了分享和友谊。</p><p>我遇到了伯乐般的上司，极大帮助我开阔了思维和视野格局，体会尊重和思考。</p><p>我找到了值得托付终身的爱人，也知道守护和依靠。</p><p>当然，也开始深深的体会到父母在，不远游的苦衷， 每个人的生活都是不容易的！</p><p>可是，我在上海这么多年，从来没有哪怕是一刻钟，让我觉得，自己是属于这里的，甚至我完全不愿意去办理居住证这种东西，这是一种说不清的道不明的感觉。</p><p>看着地铁公交行色匆匆的陌生人，在快节奏的上海，很难在萍水相逢的人中，感受到人味儿。</p><p>从本地同事的聊天中，总是能偶尔感受到流露出的淡淡的对外地人歧视和不屑。虽然明白，越优秀的上海人，反而越不会如此，但不可避免的有一些忧桑。</p><p>每逢佳节倍思亲，为了一张小小的火车票，总是需要斗智斗勇。</p><p>从小无辣不欢的我，竟然八年的磨炼，任然讨厌上海菜，任然无辣不欢。</p><p>看着一天一天上涨的房价，对比自己那微薄的收入，现实让我又一次，感受到深深的无奈。开始我是选择逃避，总觉得这些理我还太远，我也不断地学习充实自己，想着奋斗个十年二十年，总是能够拥有的！</p><p>然而我错了，时间不可能等你那么久，而且谁有知道十年以后会是什么样子呢？去年结婚以来，这些事情就不再遥远，而是接踵而至的压在了头上，工作发展、房子、 孩子、 读书、 教育、 养老。</p><p>说实话，我不怪我的父母，真正的农村长大农村出身的我，深深的懂得，父母养育和供自己读书已经是超出他们的负荷了，从我毕业开始，就应该是反哺的开始了，我缺做不到。</p><p>我觉得，我是幸运的：</p><p>我有爱我的父母、亲人和妻子，我发自内心感谢他们。</p><p>有一心为学生的老师，成长和学习中扶我前进。</p><p>有真正愿意帮助我的同学和朋友，在我迷茫时，和他们聊天倾诉，总是能得到帮助。</p><p>有亦师亦友的老板，前段时间还找老板聊过目前的现状，从老板那里得到了非常多的帮助，也在老板的帮助分析下，理顺了思路，找到了几条切实可行的办法。</p><p>经过这几个月的深思熟虑，我决定试着离开上海，transfer去成都，我为什么这么选择呢：</p><ul><li><p>个人的发展空间：软件行业中，成都目前的发展非常看好。而且我热爱SAP，虽然常常吐槽公司，但是真的很喜欢自己目前的公司，充满着人文关怀，在个人能力方面也不会被耽搁。<br>其实我越来越觉得，平台是很重要，但是更重要的个人学习和上进的欲望，SAP是个好平台，特别是成都也有分公司，于是我申请了内转，真的非常希望能够抓住机会，能够成功。</p></li><li><p>房子： 这点和上海比，就是非常大的不一样了，至少还在我能看到的几年内，有机会安家落户，这对中国人来说，真的是一件大事。</p></li><li><p>孩子和教育： 作为西南重镇，目前政策下，能够落户，那么这些都是不成问题的。</p></li><li><p>交通与家乡： 与上海相比，并没有什么不同，到家都是五小时左右，而且还有直达的飞机。</p></li><li><p>生活习惯： 16年去过一次成都，深深的被那边的美食所吸引，很符合自己的从小吃辣的习惯，而且媳妇儿也很认同</p></li><li><p>社交： 这是很重要的一点因素，我是个群居动物，不想再经受初来上海时的举目无亲的感觉。在成都有很要好的朋友和同学，这点也很不错。</p></li><li><p>人情味： 听那边的朋友讲，不管是同事还是朋友，这都是一个充满感觉得社会。无论如何，在我看来，总不会比上海差吧！</p></li></ul><p>于是， 我想这应该是我人生中不亚于高考的一次变动了吧，但愿一切都能顺利进行~</p><p>真的是语无伦次的碎碎念，就是要把心情和感受写下来，至少在多年后的自己看能，还能来评价一下，现在的想法是多么的幼稚或者多么的成熟。</p><p>还有很多很多想讲，要吃饭去了，言尽于此吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时光飞逝，光阴冉冉，前几天迎来了2018年的第一场雪，这在上海异常的难得，看着窗外雪白的世界，心瞬间平静了很多，思绪也有机会开始飞扬开始整理！&lt;/p&gt;
&lt;p&gt;不知不觉间，来上海已经八个年头了，四年大学 四年工作，这些年日里，人生发生了翻天覆地的变化。&lt;/p&gt;
&lt;p&gt;我不再是一个什么都不懂，啥事都需要问父母的孩子了&lt;/p&gt;
&lt;p&gt;我不再是能不想任何事，只读圣贤书的书生了&lt;/p&gt;
&lt;p&gt;我也不再是孤身拼搏，上海飘零的单身汉子了&lt;/p&gt;
&lt;p&gt;我完成了大学的学业走向工作的岗位， 成为了社会的一颗螺丝钉，懂得责任和担当。&lt;/p&gt;
    
    </summary>
    
    
      <category term="碎碎念" scheme="http://www.tgf21.com/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
      <category term="生活" scheme="http://www.tgf21.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>前端面试知识梳理(ES6, 2018向)</title>
    <link href="http://www.tgf21.com/post/2ffb9ce9.html"/>
    <id>http://www.tgf21.com/post/2ffb9ce9.html</id>
    <published>2018-01-21T01:55:10.000Z</published>
    <updated>2018-12-03T03:00:25.256Z</updated>
    
    <content type="html"><![CDATA[<p>最近思考了很多，关于生活，关于工作，做出了一些可能影响深远的计划和行动。<br>这段时间也梳理了一下一些知识点，前端部分，主要是偏向于ES6 的一些可能面试点，罗列了下来。</p><p>主要分为以下几个方面的问题：</p><blockquote><ul><li>ES6/js 语言相关</li><li>HTTP与网络请求</li><li>HTML5知识</li><li>CSS 知识</li><li>前端安全与优化</li></ul></blockquote><a id="more"></a><h2 id="ES6语言相关"><a href="#ES6语言相关" class="headerlink" title="ES6语言相关"></a>ES6语言相关</h2><h3 id="let-const-相对于-var-有什么不一样"><a href="#let-const-相对于-var-有什么不一样" class="headerlink" title="let const 相对于 var 有什么不一样"></a>let const 相对于 var 有什么不一样</h3><p><code>let</code>是更完美的<code>var</code>，具有块级函数作用域,大多数情况不会发生变量提升。</p><ol><li>let声明的变量具有块级作用域</li><li>let声明的变量不能通过window.变量名进行访问</li><li>形如for(let x..)的循环是每次迭代都为x创建新的绑定</li></ol><p><code>const</code>定义常量值，不能够重新赋值，如果值是一个对象，可以改变对象里边的属性值.<br>下面是var带来的不合理场景<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; i; i++) &#123;</span><br><span class="line">    a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">5</span>]() <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></p><p>在上述代码中，变量i是var声明的，在全局范围类都有效。所以每一次循环，新的i值都会覆盖旧值，导致最后输出都是10<br>而如果对循环使用let语句的情况，那么每次迭代都是为x创建新的绑定代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; i; i++) &#123;</span><br><span class="line">    a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">5</span>]() <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>当然除了这种方式让数组中的各个元素分别是不同的函数，我们还可以采用闭包和立即函数两种方法</p><h3 id="new操作符具体干了什么呢"><a href="#new操作符具体干了什么呢" class="headerlink" title="new操作符具体干了什么呢?"></a>new操作符具体干了什么呢?</h3><ol><li>创建了一个新对象</li><li>将新创建的空对象的隐式原型指向其构造函数的显示原型。</li><li>将this指向这个新对象</li><li>如果无返回值或者返回一个非对象值，则将新对象返回；如果返回值是一个新对象的话那么直接直接返回该对象</li></ol><h3 id="使用箭头函数有哪些注意点"><a href="#使用箭头函数有哪些注意点" class="headerlink" title="使用箭头函数有哪些注意点"></a>使用箭头函数有哪些注意点</h3><p>当要求动态上下文的时候，就不能够使用箭头函数。也就是this的固定化</p><ol><li>在使用=&gt;定义函数的时候，this的指向是定义时所在的对象，而不是使用时所在的对象</li><li>不能够用作构造函数，这就是说，不能够使用new命令，否则就会抛出一个错误</li><li>不能够使用arguments对象</li><li>不能使用yield命令</li></ol><h3 id="Javascript垃圾回收方法"><a href="#Javascript垃圾回收方法" class="headerlink" title="Javascript垃圾回收方法"></a>Javascript垃圾回收方法</h3><ul><li>标记清除（mark and sweep）<br>这是JavaScript最常见的垃圾回收方式，当变量进入执行环境的时候，比如函数中声明一个变量，垃圾回收器将其标记为“进入环境”，当变量离开环境的时候（函数执行结束）将其标记为“离开环境”。</li></ul><p>垃圾回收器会在运行的时候给存储在内存中的所有变量加上标记，然后去掉环境中的变量以及被环境中变量所引用的变量（闭包），在这些完成之后仍存在标记的就是要删除的变量了</p><ul><li>引用计数(reference counting)</li></ul><p>引用计数的策略是跟踪记录每个值被使用的次数，当声明了一个 变量并将一个引用类型赋值给该变量的时候这个值的引用次数就加1，如果该变量的值变成了另外一个，则这个值得引用次数减1，当这个值的引用次数变为0的时 候，说明没有变量在使用，这个值没法被访问了，因此可以将其占用的空间回收，这样垃圾回收器会在运行的时候清理掉引用次数为0的值占用的空间。</p><h3 id="说说你对Promise的理解"><a href="#说说你对Promise的理解" class="headerlink" title="说说你对Promise的理解"></a>说说你对Promise的理解</h3><p>Promise 对象用来进行延迟(deferred) 和异步(asynchronous ) 计算</p><p>有四种状态： </p><ul><li>pending: 初始状态, 非 fulfilled 或 rejected.</li><li>fulfilled: 成功的操作.</li><li>rejected: 失败的操作.</li><li>settled: Promise已被fulfilled或rejected，且不是pending</li></ul><p>ES6 promise 构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (操作成功) &#123;</span><br><span class="line">        resolve(value)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// success</span></span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// failure</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="class-的继承方法"><a href="#class-的继承方法" class="headerlink" title="class 的继承方法"></a>class 的继承方法</h3><p>在ES6中： 使用Class关键字 以及extend可以实现</p><pre><code class="js"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>{    <span class="keyword">constructor</span> () {        <span class="keyword">this</span>.type = <span class="string">'animal'</span>    }    says(say) {        <span class="built_in">console</span>.log(<span class="keyword">this</span>.type + <span class="string">'says'</span> + say)    }} <span class="keyword">let</span> animal = <span class="keyword">new</span> Animal() animal.says(<span class="string">'hello'</span>) <span class="comment">// animal says hello</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>{     <span class="keyword">constructor</span>() {         <span class="keyword">super</span>()         <span class="keyword">this</span>.type = <span class="string">'cat'</span>     } } <span class="keyword">let</span> cat = <span class="keyword">new</span> Cat() cat.says(<span class="string">'hello'</span>) <span class="comment">// cat says hello</span></code></pre><p>ES5中有一下几种方式：</p><ol><li>原型链继承 </li><li>借用构造函数继承</li><li>组合继承(原型+借用构造)</li><li>原型式继承</li><li>寄生式继承</li><li>寄生组合式继承</li></ol><h3 id="说说JS的闭包"><a href="#说说JS的闭包" class="headerlink" title="说说JS的闭包"></a>说说JS的闭包</h3><p>不说了，js基本知识</p><h2 id="HTTP知识"><a href="#HTTP知识" class="headerlink" title="HTTP知识"></a>HTTP知识</h2><h3 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h3><ul><li>100  Continue  继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息</li><li>200  OK   正常返回信息</li><li>201  Created  请求成功并且服务器创建了新的资源</li><li>202  Accepted  服务器已接受请求，但尚未处理</li><li>301  Moved Permanently  请求的网页已永久移动到新位置。</li><li>302 Found  临时性重定向。</li><li>303 See Other  临时性重定向，且总是使用 GET 请求新的 URI。</li><li>304  Not Modified  自从上次请求后，请求的网页未修改过。</li><li>400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。</li><li>401 Unauthorized  请求未授权。</li><li>403 Forbidden  禁止访问。</li><li>404 Not Found  找不到如何与 URI 相匹配的资源。</li><li>500 Internal Server Error  最常见的服务器端错误。</li><li>503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）</li></ul><h3 id="什么是Etag"><a href="#什么是Etag" class="headerlink" title="什么是Etag?"></a>什么是Etag?</h3><p>用来标记和判断客户端和服务器端内容时候有更新。<br>利用： </p><ul><li>If-Match</li><li>If-None-Match</li><li>If-Modified-Since</li></ul><p>等来实现</p><h3 id="解决跨域有哪些方法"><a href="#解决跨域有哪些方法" class="headerlink" title="解决跨域有哪些方法"></a>解决跨域有哪些方法</h3><p>由于浏览器的同源策略（限制从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。<br>一个源指的是主机名、协议和端口号的组合），我们常常会遇到跨域问题，有哪些解决办法呢。</p><ul><li>JSONP<br>利用script标签的异步加载特性实现。<br>优点：兼容性好，简单易用，支持浏览器与服务器双向通信。<br>缺点：只支持GET请求</li><li>CORS<br>和服务器沟通好，设置Access-Control-Allow-Origin 等相关表头，来实现跨域请求</li><li>window.postMessage / window.name<br>主要是利用ifream，实现夸窗口通信，一次来交换不同源的资源。</li><li>WebSocket</li></ul><h3 id="TCP传输的传输策略"><a href="#TCP传输的传输策略" class="headerlink" title="TCP传输的传输策略"></a>TCP传输的传输策略</h3><p>为了准确无误地把数据送达目标处，TCP协议采用了三次握手策略。用TCP协议把数据包送出去后，TCP不会对传送后的情况置之不理，它一定会向对方确认是否成功送达。握手过程中使用了TCP的标志：SYN和ACK。</p><p>发送端首先发送一个带SYN标志的数据包给对方。接收端收到后，回传一个带有SYN/ACK标志的数据包以示传达确认信息。<br>最后，发送端再回传一个带ACK标志的数据包，代表“握手”结束。<br>若在握手过程中某个阶段莫名中断，TCP协议会再次以相同的顺序发送相同的数据包。</p><p>断开一个TCP连接则需要“四次握手”：</p><ul><li>第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不 会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可 以接受数据。</li><li>第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号）。</li><li>第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。</li><li>第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。</li></ul><h3 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h3><p>TCP（Transmission Control Protocol，传输控制协议）是基于连接的协议，也就是说，在正式收发数据前，必须和对方建立可靠的连接。一个TCP连接必须要经过三次“对话”才能建立起来</p><p>UDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去！<br>UDP适用于一次只传送少量数据、对可靠性要求不高的应用环境。</p><h2 id="HTML5相关知识"><a href="#HTML5相关知识" class="headerlink" title="HTML5相关知识"></a>HTML5相关知识</h2><h3 id="对H5中标签语义化的理解"><a href="#对H5中标签语义化的理解" class="headerlink" title="对H5中标签语义化的理解"></a>对H5中标签语义化的理解</h3><p>标签语义化主要是能够让HTML具有一定的语义，让机器不仅仅知道页面的代码，而且能够读懂内容。<br>好处是：</p><ol><li>便于SEO</li><li>易于理解和维护</li><li>有助于机器学习(扯远了)</li></ol><h2 id="CSS相关知识"><a href="#CSS相关知识" class="headerlink" title="CSS相关知识"></a>CSS相关知识</h2><p>###CSS3 box-sizing</p><p>设置CSS盒模型为标准模型或IE模型。标准模型的宽度只包括content，IE模型包括border和padding</p><p>box-sizing属性可以为三个值之一：</p><ul><li>content-box，默认值，border和padding不计算入width之内</li><li>padding-box，padding计算入width内</li><li>border-box，border和padding计算入width之内</li></ul><h3 id="CSS选择符有哪些"><a href="#CSS选择符有哪些" class="headerlink" title="CSS选择符有哪些"></a>CSS选择符有哪些</h3><ol><li>id选择器（ # myid）</li><li>类选择器（.myclassname）</li><li>标签选择器（div, h1, p）</li><li>相邻选择器（h1 + p）</li><li>子选择器（ul &gt; li）</li><li>后代选择器（li a）</li><li>通配符选择器（ * ）</li><li>属性选择器（a[rel = “external”]）</li><li>伪类选择器（a: hover, li:nth-child）1234567891011121314151617</li></ol><h3 id="选择器优先级"><a href="#选择器优先级" class="headerlink" title="选择器优先级"></a>选择器优先级</h3><p>!important &gt; id &gt; class &gt; tag<br>important 比 内联优先级高,但内联比 id 要高<br>其次就是，越详细，优先级越高</p><h2 id="前端安全与优化"><a href="#前端安全与优化" class="headerlink" title="前端安全与优化"></a>前端安全与优化</h2><h3 id="优化前端做过哪些尝试"><a href="#优化前端做过哪些尝试" class="headerlink" title="优化前端做过哪些尝试"></a>优化前端做过哪些尝试</h3><p>这里面可以说的太多了，仅仅点到为止。</p><ul><li><p>性能优化</p><ul><li>减少请求次数</li><li>使用浏览器 HTTP 级别缓存</li><li>打包 压缩 源文件</li><li>使用CDN 加速</li><li>使用DNS 预解析</li><li>使用懒加载，分页加载等</li></ul></li><li><p>代码优化</p><ul><li>使用语义化标签</li><li>减少iframe：iframe是SEO的大忌，iframe有好处也有弊端</li><li>避免重定向</li><li>布局代码写前面</li><li>删除空样式</li><li>不滥用浮动，字体，需要加载的网络字体根据网站需求再添加</li><li>选择器性能优化</li><li>避免使用表达式，避免用id写样式</li><li>压缩</li><li>减少重复代码</li><li>使用WebP</li><li>图片合并，CSS sprite技术</li></ul></li></ul><h3 id="什么是SQL注入，如何防范"><a href="#什么是SQL注入，如何防范" class="headerlink" title="什么是SQL注入，如何防范"></a>什么是SQL注入，如何防范</h3><p>所谓SQL注入，就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。具体来说，它是利用现有应用程序，将（恶意的）SQL命令注入到后台数据库引擎执行的能力，它可以通过在Web表单中输入（恶意）SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句。</p><p>防范：</p><ul><li>永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双”-“进行转换等。</li><li>永远不要使用动态拼装SQL，可以使用参数化的SQL或者直接使用存储过程进行数据查询存取。</li><li>永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。</li><li>不要把机密信息明文存放，请加密或者hash掉密码和敏感的信息</li></ul><h3 id="什么是XSS，-如何防范"><a href="#什么是XSS，-如何防范" class="headerlink" title="什么是XSS， 如何防范"></a>什么是XSS， 如何防范</h3><p>跨站脚本攻击，攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目.</p><p>防范：</p><ul><li>检查和encodeing用户输入的内容</li><li>cookie 等内容做好加密，避免用户隐私泄露，设置HttpOnly</li><li>尽量使用POST提交表单</li></ul><h3 id="CSRF呢"><a href="#CSRF呢" class="headerlink" title="CSRF呢"></a>CSRF呢</h3><p>CSRF（Cross-site request forgery）跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与XSS非常不同，XSS利用站点内的信任用户，而CSRF则通过伪装来自受信任用户的请求来利用受信任的网站</p><h3 id="HTTP和HTTPS"><a href="#HTTP和HTTPS" class="headerlink" title="HTTP和HTTPS"></a>HTTP和HTTPS</h3><p>HTTP协议通常承载于TCP协议之上，在HTTP和TCP之间添加一个安全协议层（SSL或TSL），这个时候，就成了我们常说的HTTPS。</p><p>默认HTTP的端口号为80，HTTPS的端口号为443。</p><blockquote><p>为什么HTTPS安全</p></blockquote><p>因为网络请求需要中间有很多的服务器路由器的转发。中间的节点都可能篡改信息，而如果使用HTTPS，密钥在你和终点站才有。https之所以比http安全，是因为他利用ssl/tls协议传输。它包含证书，卸载，流量转发，负载均衡，页面适配，浏览器适配，refer传递等。保障了传输过程的安全性。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近思考了很多，关于生活，关于工作，做出了一些可能影响深远的计划和行动。&lt;br&gt;这段时间也梳理了一下一些知识点，前端部分，主要是偏向于ES6 的一些可能面试点，罗列了下来。&lt;/p&gt;
&lt;p&gt;主要分为以下几个方面的问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;ES6/js 语言相关&lt;/li&gt;
&lt;li&gt;HTTP与网络请求&lt;/li&gt;
&lt;li&gt;HTML5知识&lt;/li&gt;
&lt;li&gt;CSS 知识&lt;/li&gt;
&lt;li&gt;前端安全与优化&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Css" scheme="http://www.tgf21.com/tags/Css/"/>
    
      <category term="JavaScript" scheme="http://www.tgf21.com/tags/JavaScript/"/>
    
      <category term="前端" scheme="http://www.tgf21.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ES6" scheme="http://www.tgf21.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>伪强迫症患者的新MAC配置小记-开发环境篇</title>
    <link href="http://www.tgf21.com/post/ec5c55fa.html"/>
    <id>http://www.tgf21.com/post/ec5c55fa.html</id>
    <published>2017-12-20T01:14:33.000Z</published>
    <updated>2018-12-03T03:00:25.256Z</updated>
    
    <content type="html"><![CDATA[<p>经过前排一篇的安装和设置之后，感觉笔记本在手上顺手多了，我可以打开电脑，打上一直兴奋剂，music up，就可以美美的开始工作啦！！！</p><p>等等，工作？！ 哇，原始的terminal，糟糕的界面，各种缺失。 作为一个程序员，为了赏心悦目的开发环境，又需要做些什么呢？</p><h2 id="必备工具安装"><a href="#必备工具安装" class="headerlink" title="必备工具安装"></a>必备工具安装</h2><h3 id="Xcode-command-line-tools"><a href="#Xcode-command-line-tools" class="headerlink" title="Xcode command line tools"></a>Xcode command line tools</h3><p>既然是在mac里，XCode是必不可少的啦。去 Mac App Store 下载最新版的 Xcode，然后再运行下面的命令！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><h3 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h3><p>方便的安装和管理我们需要的各种软件和工具，安装mac的包管理工具 <code>Homebrew</code>.官方称之为The missing package manager for OS X</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><p>具体情况请参见官网。</p><p>有了 brew 以后，要下载工具，比如 MySQL、Gradle、Maven、Node.js 等工具，就不需要去网上下载了，只要一行命令就能搞定:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mysql gradle maven node</span><br></pre></td></tr></table></figure><h3 id="Homebrew-Cask"><a href="#Homebrew-Cask" class="headerlink" title="Homebrew Cask"></a>Homebrew Cask</h3><p>brew-cask 允许你使用命令行安装 OS X 应用。比如你可以这样安装 Chrome：brew cask install google-chrome。还有 Evernote、Skype、Sublime Text、VirtualBox 等都可以用 brew-cask 安装。</p><p>brew-cask 是社区驱动的，如果你发现 brew-cask 上的应用不是最新版本，或者缺少你某个应用，你可以自己提交 pull request。</p><p>安装步骤见官网。</p><p>应用也可以通过 App Store 安装，而且有些应用只能通过 App Store 安装，比如 Xcode 等一些 Apple 的应用。App Store 没有对应的命令行工具，还需要 Apple ID。倒是更新起来很方便。</p><p>几乎所有常用的应用都可以通过 brew-cask 安装，而且是从应用的官网上下载，所以你要安装新的应用时，建议用 brew-cask 安装。如果你不知道应用在 brew-cask 中的 ID，可以先用brew cask search命令搜索。</p><h3 id="Iterm2"><a href="#Iterm2" class="headerlink" title="Iterm2"></a>Iterm2</h3><p>然后，就是将系统自带的terminal替换成使用更加方便，特性十足的Iterm2了，丰富的主题，漂亮的界面，让我毫不犹豫的抛弃了terminal。</p><p>感谢 brew-cask，我们可以通过命令行自动安装 iTerm2 了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install iterm2</span><br></pre></td></tr></table></figure><p>在打开新的窗口/标签页的时候，默认情况下新窗口总是 HOME 目录，还需要我每次敲命令才能进入工作目录。如果想要这个新窗口在打开的时候就自动进入工作目录，需要如下设置：</p><p>选择Iterm菜单 &gt; Preferences &gt; Profiles，选择你在使用的 Profile（默认是Default），在General标签页中的Working Directory部分中选择Reuse previous seesion’s directory。</p><p>至此，Terminal 应用已经出色的完成了其历史使命。后面命令行就交给 iTerm2 啦。</p><p>在 iTerm2 中双击会自动选中对应的词，三击会选中对应的整行。选中的内容会自动进入剪贴板，不需要再按⌘C复制</p><h3 id="Oh-My-Zsh"><a href="#Oh-My-Zsh" class="headerlink" title="Oh My Zsh"></a>Oh My Zsh</h3><p>默认的 Bash 是黑白的，没有色彩。而 Oh My Zsh 可以带你进入彩色时代。Oh My Zsh 同时提供一套插件和工具，可以简化命令行操作。后面我们会看到很多介绍，你会看到我爱死这家伙了</p><p>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure><p>在 Z shell 中，~/.zshrc是最重要的配置文件。Oh My Zsh 在安装的时候会把当前环境的$PATH写入~/.zshrc中。这并不是我期望的行为，因为使用了 brew，我们基本不再需要去定制$PATH，而 Oh My Zsh 提供的默认$PATH值$HOME/bin:/usr/local/bin:$PATH是非常合适的一个值，它把$HOME/bin加入了$PATH，可以让我们把自己用的脚本放到$HOME/bin下。</p><p>所以建议把~/.zshrc重置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure><h3 id="Dash"><a href="#Dash" class="headerlink" title="Dash"></a>Dash</h3><p>开发过程中，少不了需要各种各样的文档等，我推荐Dash。可以使用 cask 安装。</p><h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><p>系统自带有vim，但是版本更不上，而且很多设置都不存在的，所以，额外再次安装新的vim。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install vim</span><br></pre></td></tr></table></figure><p>然后就是设置Vim工作环境啦，这里面又是一大段内容，如何把VIM设置成多彩方便的IDE呢，可以参照我前面的文章！</p><h3 id="Vscode"><a href="#Vscode" class="headerlink" title="Vscode"></a>Vscode</h3><p>如果用不习惯Vim，或者嫌弃终端输入太麻烦，那么我强烈推荐VScode，继承了VS studio 的一贯优势，而且有微软严谨逼格高的特点，相比于 <code>atom</code> <code>sublime</code> 来说，我觉得总体评分都要高！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install vscode</span><br></pre></td></tr></table></figure><p>或者去官网下载啦， 对于想使用vim mode的小伙伴，可以安装vim插件，不过别忘了增加一个设置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool false         # For VS Code</span><br><span class="line">defaults write com.microsoft.VSCodeInsiders ApplePressAndHoldEnabled -bool false # For VS Code Insider</span><br><span class="line">defaults delete -g ApplePressAndHoldEnabled                                      # If necessary, reset global default</span><br></pre></td></tr></table></figure><p>推荐插件的话： </p><p><code>Git histroy</code> <code>VIM</code> <code>Vscode-icon</code> <code>vetur</code> <code>git lens</code> <code>code spell checker</code> 等。</p><p>个人一些设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;window.zoomLevel&quot;: 1,</span><br><span class="line">    &quot;editor.minimap.enabled&quot;: true,</span><br><span class="line">    &quot;editor.formatOnSave&quot;: false,</span><br><span class="line">    &quot;workbench.iconTheme&quot;: &quot;vscode-icons&quot;,</span><br><span class="line">    &quot;vim.disableAnnoyingNeovimMessage&quot;: true,</span><br><span class="line">    &quot;editor.fontSize&quot;: 14,</span><br><span class="line">    &quot;editor.tabSize&quot;: 2,</span><br><span class="line">    &quot;emmet.includeLanguages&quot;: &#123;</span><br><span class="line">        &quot;hbs&quot;: &quot;html&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;explorer.autoReveal&quot;: false,</span><br><span class="line">    &quot;vim.useSystemClipboard&quot;: true,</span><br><span class="line">    &quot;sync.gist&quot;: &quot;0fb6a85d3697c5053733a3fcc8f14c78&quot;,</span><br><span class="line">    &quot;sync.lastUpload&quot;: &quot;2017-08-02T05:34:37.083Z&quot;,</span><br><span class="line">    &quot;sync.autoDownload&quot;: false,</span><br><span class="line">    &quot;sync.autoUpload&quot;: false,</span><br><span class="line">    &quot;sync.lastDownload&quot;: &quot;&quot;,</span><br><span class="line">    &quot;sync.forceDownload&quot;: false,</span><br><span class="line">    &quot;sync.anonymousGist&quot;: false,</span><br><span class="line">    &quot;sync.host&quot;: &quot;&quot;,</span><br><span class="line">    &quot;sync.pathPrefix&quot;: &quot;&quot;,</span><br><span class="line">    &quot;sync.quietSync&quot;: false,</span><br><span class="line">    &quot;sync.askGistName&quot;: false,</span><br><span class="line">    &quot;gitlens.blame.line.enabled&quot;: false,</span><br><span class="line">    &quot;cSpell.enabledLanguageIds&quot;: [</span><br><span class="line">        &quot;c&quot;,</span><br><span class="line">        &quot;cpp&quot;,</span><br><span class="line">        &quot;csharp&quot;,</span><br><span class="line">        &quot;go&quot;,</span><br><span class="line">        &quot;handlebars&quot;,</span><br><span class="line">        &quot;javascript&quot;,</span><br><span class="line">        &quot;javascriptreact&quot;,</span><br><span class="line">        &quot;json&quot;,</span><br><span class="line">        &quot;latex&quot;,</span><br><span class="line">        &quot;markdown&quot;,</span><br><span class="line">        &quot;php&quot;,</span><br><span class="line">        &quot;plaintext&quot;,</span><br><span class="line">        &quot;python&quot;,</span><br><span class="line">        &quot;ruby&quot;,</span><br><span class="line">        &quot;text&quot;,</span><br><span class="line">        &quot;typescript&quot;,</span><br><span class="line">        &quot;typescriptreact&quot;,</span><br><span class="line">        &quot;yml&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;cSpell.ignorePaths&quot;: [</span><br><span class="line">        &quot;**/node_modules/**&quot;,</span><br><span class="line">        &quot;**/vscode-extension/**&quot;,</span><br><span class="line">        &quot;**/.git/**&quot;,</span><br><span class="line">        &quot;.vscode&quot;,</span><br><span class="line">        &quot;typings&quot;,</span><br><span class="line">        &quot;**/tmp/**&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;cSpell.userWords&quot;: [</span><br><span class="line">        &quot;Resque&quot;,</span><br><span class="line">        &quot;constantize&quot;,</span><br><span class="line">        &quot;downcase&quot;,</span><br><span class="line">        &quot;eval&quot;,</span><br><span class="line">        &quot;openssl&quot;,</span><br><span class="line">        &quot;printf&quot;,</span><br><span class="line">        &quot;realtime&quot;,</span><br><span class="line">        &quot;sprintf&quot;,</span><br><span class="line">        &quot;strftime&quot;,</span><br><span class="line">        &quot;tableize&quot;,</span><br><span class="line">        &quot;uuid&quot;,</span><br><span class="line">        &quot;uuids&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;gitlens.statusBar.enabled&quot;: false,</span><br><span class="line">    &quot;window.openFilesInNewWindow&quot;: &quot;on&quot;,</span><br><span class="line">    &quot;editor.autoIndent&quot;: true,</span><br><span class="line">    &quot;gitlens.codeLens.locations&quot;: [</span><br><span class="line">        &quot;document&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;gitlens.advanced.messages&quot;: &#123;</span><br><span class="line">        &quot;suppressCommitHasNoPreviousCommitWarning&quot;: false,</span><br><span class="line">        &quot;suppressCommitNotFoundWarning&quot;: false,</span><br><span class="line">        &quot;suppressFileNotUnderSourceControlWarning&quot;: false,</span><br><span class="line">        &quot;suppressGitVersionWarning&quot;: false,</span><br><span class="line">        &quot;suppressLineUncommittedWarning&quot;: false,</span><br><span class="line">        &quot;suppressNoRepositoryWarning&quot;: false,</span><br><span class="line">        &quot;suppressUpdateNotice&quot;: true,</span><br><span class="line">        &quot;suppressWelcomeNotice&quot;: false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Git-常用alias设置"><a href="#Git-常用alias设置" class="headerlink" title="Git 常用alias设置"></a>Git 常用alias设置</h3><p>git绝对是开发中用的最多的。设置一些快捷别名，很有必要。</p><p>Oh My Zsh 提供了一套系统别名（alias），来达到相同的功能。比如gst作为git status的别名。而且 Git 插件是 Oh My Zsh 默认启用的，相当于你使用了 Oh My Zsh，你就拥有了一套高效率的别名，而且还是全球通用的。是不是棒棒哒？</p><p>完整列表请参考：<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git</a></p><h2 id="语言相关"><a href="#语言相关" class="headerlink" title="语言相关"></a>语言相关</h2><h3 id="rbenv"><a href="#rbenv" class="headerlink" title="rbenv"></a>rbenv</h3><p>Ruby 版本和包管理器。rbenv 就是这样一个轻量级工具，它可以通过 brew 安装。</p><p>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install rbenv ruby-build</span><br></pre></td></tr></table></figure><p>然后在~/.zshrc中加上rbenv插件。否则你需要手动添加eval “$(rbenv init -)”到~/zshrc或者~/.zprofile文件里。</p><p>有时候项目会依赖一些奇怪的版本号，比如ruby-2.1.0，这个时候你需要 rbenv-aliases 帮忙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install rbenv-aliases</span><br></pre></td></tr></table></figure><p>替代品有 RVM、chruby。因为 RVM 不能通过 brew 安装，并且安装的时候会没有节操的修改一堆文件，所以被我早早的弃用了</p><h3 id="node-包管理"><a href="#node-包管理" class="headerlink" title="node 包管理"></a>node 包管理</h3><p>Node 的版本管理工具有很多，常用的会有以下几个：</p><ul><li>nodenv<br>该工具是一个类似 rbenv 的工具，命令和其完全一样，安装和配置也一样。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nodenv</span><br></pre></td></tr></table></figure></li></ul><p>你需要手动添加以下配置到~/.zshrc或者~/.zprofile文件里。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;$HOME/.nodenv/bin:$PATH&quot;</span><br><span class="line">eval &quot;$(nodenv init -)&quot;</span><br></pre></td></tr></table></figure></p><ul><li>nvm<br>该工具是一个类似 RVM 的工具，命令安装方式也基本一样，可以参考官方文档</li></ul><p>还有一些设置，就和工作和特定语言有关了，这就不赘述了。</p><p>工欲善其事，必先利其器，经过一些小小的设置，让你的工作效率流畅了很多，何乐而不为呢，当然也不要为了工具而工具！！！</p><p>好了，这次的小记，就算结束了，以后有更多的东西，再来补充！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经过前排一篇的安装和设置之后，感觉笔记本在手上顺手多了，我可以打开电脑，打上一直兴奋剂，music up，就可以美美的开始工作啦！！！&lt;/p&gt;
&lt;p&gt;等等，工作？！ 哇，原始的terminal，糟糕的界面，各种缺失。 作为一个程序员，为了赏心悦目的开发环境，又需要做些什么呢？&lt;/p&gt;
&lt;h2 id=&quot;必备工具安装&quot;&gt;&lt;a href=&quot;#必备工具安装&quot; class=&quot;headerlink&quot; title=&quot;必备工具安装&quot;&gt;&lt;/a&gt;必备工具安装&lt;/h2&gt;&lt;h3 id=&quot;Xcode-command-line-tools&quot;&gt;&lt;a href=&quot;#Xcode-command-line-tools&quot; class=&quot;headerlink&quot; title=&quot;Xcode command line tools&quot;&gt;&lt;/a&gt;Xcode command line tools&lt;/h3&gt;&lt;p&gt;既然是在mac里，XCode是必不可少的啦。去 Mac App Store 下载最新版的 Xcode，然后再运行下面的命令！&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;xcode-select --install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Homebrew&quot;&gt;&lt;a href=&quot;#Homebrew&quot; class=&quot;headerlink&quot; title=&quot;Homebrew&quot;&gt;&lt;/a&gt;Homebrew&lt;/h3&gt;&lt;p&gt;方便的安装和管理我们需要的各种软件和工具，安装mac的包管理工具 &lt;code&gt;Homebrew&lt;/code&gt;.官方称之为The missing package manager for OS X&lt;/p&gt;
    
    </summary>
    
    
      <category term="编辑器" scheme="http://www.tgf21.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
      <category term="Mac" scheme="http://www.tgf21.com/tags/Mac/"/>
    
      <category term="环境" scheme="http://www.tgf21.com/tags/%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>伪强迫症患者的新MAC配置小记 - 工具篇</title>
    <link href="http://www.tgf21.com/post/3775de54.html"/>
    <id>http://www.tgf21.com/post/3775de54.html</id>
    <published>2017-12-18T09:49:25.000Z</published>
    <updated>2018-12-03T03:00:25.249Z</updated>
    
    <content type="html"><![CDATA[<p>最近到手2017 Mac Book Pro， 还真有点小兴奋呢。</p><img src="/post/3775de54/1.png"><p>经过大概两天闲暇时间的折腾，终于可以让我满意的用来工作啦，那么面对一台全新的mac，作为程序员的我，到底做了些什么呢？</p><a id="more"></a><h2 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h2><h3 id="设置-Trackpad（触摸板）轻触为单击"><a href="#设置-Trackpad（触摸板）轻触为单击" class="headerlink" title="设置 Trackpad（触摸板）轻触为单击"></a>设置 Trackpad（触摸板）轻触为单击</h3><p>作为一个懒人，能触摸一下解决问题的当然不愿意需要花力气去按压了。</p><p>打开<code>System Preferences</code>，点击<code>Trackpad</code>图标，勾选<code>Tap to click</code>选项，现在手指轻轻一碰触摸板，就达到鼠标单击的顺滑效果.</p><h3 id="将Dock设置为自动隐藏"><a href="#将Dock设置为自动隐藏" class="headerlink" title="将Dock设置为自动隐藏"></a>将Dock设置为自动隐藏</h3><p>我喜欢更大更全面的使用到屏幕，讨厌Dock占据一定比例，使得屏幕总感觉很短。于是将Dock设置为不使用的时候隐藏，而且作为Aifred重度用户，dock使用的真的不多。</p><h3 id="全键盘控制模式"><a href="#全键盘控制模式" class="headerlink" title="全键盘控制模式"></a>全键盘控制模式</h3><p>Vim 的重度用户，越来越少的使用鼠标了，希望所有的东西都能通过快捷键来完成。Mac 有基本的全键盘模式，什么意思呢，借用别人的截图。</p><p>全键盘控制模式是什么？ 举一个例子，如下图所示，我正在写一个文档，此文档还没有保存，也没有文件名，如果不不小心点了关闭按钮，将会弹出一个对话框</p><img src="/post/3775de54/2.jpg"><p>当前，<code>[Save]</code>按钮处于默认激活状态，按回车将会弹出保存对话框。但是如果我不想保存呢？ 只能通过鼠标或者触摸板来移动光标后点击<code>[Don&#39;t Save]</code>来取消保存。那我能不能通过键盘控制光标激活<code>[Don&#39;t Save]</code>按钮呢？ 答案是肯定的，做一个简单设置就好</p><p>如图，首先打开<code>System Preferences</code>，点击<code>Keyboard</code>图标，选择<code>Shortcuts</code>这个 Tab, 选中All controls<br><img src="/post/3775de54/3.jpg"></p><p>现在当我再次试图关闭一个未保存的文件时，新弹出的对话框如下，有了些许变化，在[Don’t Save]按钮上多了一个蓝色的外框，当你按键盘上的tab键的时候，蓝色的外框会在 3 个按钮间切换。 假设现在蓝色的外框在[Don’t Save]按钮上，你按下回车，却发现系统依然进入了保存文件对话框，为什么蓝色的外框不起作用呢？那是因为蓝色的外框选中的按钮是由空格键触发的，当你按下空格键，系统就会不保存文件直接退出。 这样当你不方便使用鼠标和触摸板的时候，可以更快速的和你的 MacBook 交互。</p><img src="/post/3775de54/4.jpg"><h3 id="快捷锁定屏幕"><a href="#快捷锁定屏幕" class="headerlink" title="快捷锁定屏幕"></a>快捷锁定屏幕</h3><p>常常需要离开电脑前面，这个时候就需要能够快速的锁定屏幕了。<br>打开<code>System Preferences</code>，点击<code>Desktop &amp; Screen Saver</code>图标，选择<code>Screen Saver</code>这个 Tab，再点击<code>Hot Corners...</code>，在弹出的如下界面里面，右下角选择<code>Put Display to Sleep</code>，点击 <code>OK</code> 确定。</p><img src="/post/3775de54/5.jpg"><p>再打开System Preferences，点击<code>Security &amp; Privacy</code>图标，在GeneralTab 内，勾选Require password[immediately] after sleep or screen save begins。</p><img src="/post/3775de54/6.jpg"><p>现在当你离开电脑前时，记得<code>一摸触摸板</code>或者<code>一甩鼠标</code>将光标快速的移到屏幕的右下角，MacBook 将立刻进入Screen Saver模式并且需要密码才能进入桌面。</p><h2 id="安装日常软件"><a href="#安装日常软件" class="headerlink" title="安装日常软件"></a>安装日常软件</h2><p>有那么一些工具，让我换了电脑以后，及其的怀念，离开了就无法工作的感觉！</p><h3 id="万能查找文件和应用程序的-–-Alfred"><a href="#万能查找文件和应用程序的-–-Alfred" class="headerlink" title="万能查找文件和应用程序的 – Alfred"></a>万能查找文件和应用程序的 – Alfred</h3><p>Mac 自带有Spotlight， 但是Alfred要比自带的强大太多太多，可以直接下载免费版安装使用，Alfred 另外还提供了更强大的工作流(Workflows)和剪切板(Clipboard)管理等高级功能，需要购买 Powerpack。对于日常的操作，免费版已经足够使用了,可以直接google搜索下载。</p><p>因为 Alfred 可以完全取代 Spotlight，下面先删除 Spotlight 占用的快捷键command + 空格，以供 Alfred 将来使用</p><p>打开<code>System Preferences</code>，选择<code>Keyboard</code>，切换到<code>Shortcuts</code>这个 Tab 下，点击 Spotlight，取消对应的 2 个快捷键设置。</p><img src="/post/3775de54/7.jpg"><p>打开 Alfred，在菜单栏点击 Alfred 图标，打开Preferences…</p><p>如下图所示，设置 Alfred 的快捷键为<code>command + 空格</code></p><img src="/post/3775de54/8.jpg"><p>这样就可以开启你的无限可能了！</p><h3 id="来一支兴奋剂-–-amphetamine"><a href="#来一支兴奋剂-–-amphetamine" class="headerlink" title="来一支兴奋剂 – amphetamine"></a>来一支兴奋剂 – amphetamine</h3><p>常常遇到需要做演示或者开会的时候，屏幕就自动休眠了，为了避免这种尴尬，之前一直用的是 <code>Caffeine</code>， 最近发现一款比 <code>Caffeine</code> 强大一些的工具 <code>amphetamine</code>，用了以后，让我非常满意！ 一个是咖啡因 一个是安非 于是我选择了兴奋剂！</p><img src="/post/3775de54/9.jpg"><p>设置几个条件，或者在需要的时候，轻轻点击一下，再也不尴尬！！！</p><h3 id="窗口随意变化-–-Spectacle"><a href="#窗口随意变化-–-Spectacle" class="headerlink" title="窗口随意变化 – Spectacle"></a>窗口随意变化 – Spectacle</h3><p>Spectacle是一款易用的通过键盘快捷键修改或移动窗口位置的组织工具，使用Spectacle可以快速将窗口放置于屏幕中心，逐步扩展窗口大小（至全屏），瞬间缩小窗口至原尺寸的一半大小并移至窗口上下左右角四个位置，有了他我们就可以在有限的Mac屏幕下快速调用窗口或是组织更多的窗口显示在我们的眼前，绝对提高使用效率</p><img src="/post/3775de54/10.png"><h3 id="截屏软件-—-Snagit"><a href="#截屏软件-—-Snagit" class="headerlink" title="截屏软件 —  Snagit"></a>截屏软件 —  Snagit</h3><p>神级截屏和简易图片处理软件！</p><h3 id="Vscode"><a href="#Vscode" class="headerlink" title="Vscode"></a>Vscode</h3><p>最离开怕是编辑器了吧，之前VIM 用的比较多，知道我遇到了VScode， 真的是良心之作！</p><h3 id="其他工具及软件推荐"><a href="#其他工具及软件推荐" class="headerlink" title="其他工具及软件推荐"></a>其他工具及软件推荐</h3><p>上面那些都是爱不释手的，再推荐一些日常使用的。</p><ul><li>Evernote： 笔记工具，之前用过很多各种各样的，包括 OneNote WizNote 等等， 要说其中的好坏又是一个长篇大论</li><li>有道词典： 总是会有遇到不认识的单词或者语句吧！</li><li>网易云音乐： 作为程序员，音乐总是少不了的！</li><li>chrome： 最好的浏览器，没有之一！</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近到手2017 Mac Book Pro， 还真有点小兴奋呢。&lt;/p&gt;
&lt;img src=&quot;/post/3775de54/1.png&quot;&gt;
&lt;p&gt;经过大概两天闲暇时间的折腾，终于可以让我满意的用来工作啦，那么面对一台全新的mac，作为程序员的我，到底做了些什么呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="编辑器" scheme="http://www.tgf21.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
      <category term="Mac" scheme="http://www.tgf21.com/tags/Mac/"/>
    
      <category term="环境" scheme="http://www.tgf21.com/tags/%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>让你网站变得更酷儿的101中方法[译]</title>
    <link href="http://www.tgf21.com/post/36ce4f85.html"/>
    <id>http://www.tgf21.com/post/36ce4f85.html</id>
    <published>2017-07-08T05:21:45.000Z</published>
    <updated>2018-12-03T03:00:25.260Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>原文链接 : <a href="https://medium.freecodecamp.com/101-ways-to-make-your-website-more-awesome-79c934dd2a11#.enfq945da" target="_blank" rel="noopener">101 Ways to Make Your Website More Awesome</a></li><li>原文作者 : <a href="https://medium.freecodecamp.com/@wntart" target="_blank" rel="noopener">Nicholas Tart</a></li><li>译文出自 : <a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a></li><li>译者 : <a href="https://github.com/zhangjd" target="_blank" rel="noopener">达仔</a></li><li>校对者: <a href="https://github.com/jamweak" target="_blank" rel="noopener">jamweak</a>、<a href="https://github.com/cyseria" target="_blank" rel="noopener">cyseria</a></li></ul></blockquote><p>上周，我和一位老客户聊天，她说：“尼克，我觉得我的网站需要改进，但我不能确定我具体需要做什么。”</p><p>然后我就去问了一圈，包括朋友、家人和其他非互联网行业的商务人士，他们都提到了相同的观点：</p><blockquote><p>“我需要一个检查清单，因为我不知道怎样建站，这也是我要雇人来做这件事情的原因。但是我依然需要知道这个过程涉及到哪些方面。”</p></blockquote><p>因此，我列了一个我们在 <a href="https://awesomeweb.com/" target="_blank" rel="noopener">AwesomeWeb</a> 上完成的优化清单（以及一些我们还没完成的）。</p><p>我敢保证:</p><p>如果你能把列表的每一项问题都改好，你将会拥有业界里最好的网站之一。</p><p><em>你是怎么知道的？</em></p><a id="more"></a><p>在 AwesomeWeb 里，我已经评估过 1,000 多个自由职业者。据我所了解的情况，我从没见过一个网站可以把所有选框都打上勾的。</p><p>对于企业老板，根据这个列表，你可以了解到接下来可以做哪些改进工作，然后把它发给你的设计或者开发去修改。你甚至还可以自己去修复其中的一部分问题。</p><p>对于自由职业者，使用这个列表可以让你做出更加酷炫的内容，然后回去找你的老客户们，对他们说：</p><p>“我重新回顾了之前的项目，我们可以修复这里、这里和这里，给我 $500, $1000, $5000 然后你可以期待得到以下的改进结果……”</p><p>重点是…</p><p>…我希望可以帮你构造出更加酷炫的网站。事不宜迟，现在进入正题，开始介绍这个列表：</p><h3 id="酷炫的品牌"><a href="#酷炫的品牌" class="headerlink" title="酷炫的品牌"></a>酷炫的品牌</h3><ol><li>挑选一个 <code>专业的 logo</code>，现在很难找到一个带有很棒的 logo 的网站或者博客，因此这是一个瞬间获取信任感的好方法。</li><li>上传一个 <code>支持 retina 屏幕的 favicon</code> (在浏览器标签上显示的正方形小图标)。大部分网站的 favicon 都是 16x16 像素的，在 retina 屏幕会显得模糊。使用 <a href="http://www.xiconeditor.com/" target="_blank" rel="noopener">X-Icon Editor</a> 生成 64x64 像素大小的 favicon。</li><li>使用 <code>支持 retina 屏幕的图片</code>。这很简单，只需要确保图片宽高是容器的两倍，然后显示时缩放就可以了。</li><li><code>最多使用 2-3 种颜色</code>。包括背景色、文字-动作颜色和强调色。</li><li>选择调色板时，从 <code>互补色或者三色组</code>（complementary or triad colors）开始选择，然后再进行调整。好的颜色组合会给你带来充满故事感的设计。</li><li><code>不要使用纯黑色</code> (#000000)。纯黑色是不存在的，所以在网上使用纯黑色看起来不合适。实际上，黑色应该总是作为其它颜色的深色阴影。</li><li><code>不要使用浅灰色</code> (比如 #cccccc)。如果你希望设计更显个性化，可以试着添加一点黄色显得温暖，添加红色给予能量，而蓝色产生信任。</li></ol><h3 id="酷炫的排版"><a href="#酷炫的排版" class="headerlink" title="酷炫的排版"></a>酷炫的排版</h3><ol><li>挑选一种 <code>优质的字体</code>。使用 <a href="https://typekit.com/" target="_blank" rel="noopener">Typekit</a> 之类的服务吧。据说多达 95% 的网站都是有排版的，想要产生良好的第一印象，使用优质字体是最简单、成本最低的方法。</li><li><code>最多使用 2-3 种字体</code>。使用更多字体会显得杂乱，并且减慢加载时间。挑选一种字体用在头部，一种用在段落中，如果有需要的话，还可以挑选一种用在其它特殊情况里。</li><li>设置 body 的字体大小为 <code>最小 16px</code>，更小的字体在大屏幕中不方便阅读，如果是移动端页面可以考虑的最小值为 12px。</li><li>设置 <code>排版缩放比例</code>，就像（乐理中有）增四度，纯五度音程或者（在绘画使用）黄金比例。根据比例来设置段落文本大小，以及 H4, H3, H2 和 H1 标签。当然，文本的行高和间距也要基于这个比例。</li><li>设计其它的 <code>排版元素</code>，包括引用、符号列表、数字编号列表、表格标题、帮助文本、警告框、高亮文本、代码示例、缩写甚至地址。</li><li>选择一种 <code>自定义图标字体</code>，比如 <a href="https://fortawesome.github.io/Font-Awesome/" target="_blank" rel="noopener">Font Awesome</a>，来代替图片和其它一些元素，比如社交媒体 logo、导航按钮、交互图形等。图标字体的加载速度更快，可以任意缩放，并且可以随意更改图标颜色。</li></ol><h3 id="酷炫的布局"><a href="#酷炫的布局" class="headerlink" title="酷炫的布局"></a>酷炫的布局</h3><ol><li>使用 <code>三分法</code> 来设计基本布局。水平垂直把布局划成三等分，然后当线段横穿时，设法对齐关键的焦点。</li><li>使用一个网格系统来维护 <code>垂直方向的网格</code>。把你的布局分隔成 8 列、12 列或者 16 列的布局，列与列之间带有足够空白。</li><li>使用 <code>基线网格</code> 保持垂直方向的调和感。文本行之间的空间，和内容块之间的空间都同样重要。每行文本应该都拥有一定的底部外边距，也就是位于基线的地方。</li><li><code>空白</code> 是奢侈的。空格的存在是为了创造呼吸空间和平衡，你应该把读者的眼球吸引到重要的地方去。</li><li><code>均衡摆放视觉元素</code>，比如按钮、输入框、表单和大标题等。你应该把眼睛眯起来，试着跟踪那些你想让用户关注到的路径点。</li></ol><h3 id="酷炫的用户界面"><a href="#酷炫的用户界面" class="headerlink" title="酷炫的用户界面"></a>酷炫的用户界面</h3><ol><li>使用大大的加粗的 <code>行为按钮</code>。每个页面应该只有一个目标，而且几乎都是点击一个按钮而已。所以确保这个按钮不会被用户忽略。</li><li>添加 <code>鼠标悬停 (hover) 和鼠标点击 (active) 状态</code> 的样式给链接、按钮、输入框和文字区域。如果你选择在鼠标悬停时让按钮颜色变亮，那你也应该对于链接和输入框边框给出同样的样式。</li><li>保持 <code>表单样式</code> 的一致性。所有的文本区域和输入框都应该有相同的样式。包括相同的边框颜色、背景颜色、悬停状态、点击状态、占位符文字、点击状态文字等。确保 tabindex 属性的正确设置，以便用户可以使用 tab 键在表单项之间用正确的顺序切换。</li><li>改变 <code>已经点击过的链接</code> 的颜色，让用户知道他们已经去过那个页面了。</li><li>一旦你拥有了自己的 logo、颜色、排版、布局和图像大小，你要建立一个 <code>风格指南</code>。好的用户界面应该使用风格一致的组件，其样式应该总是相同的。</li></ol><h3 id="酷炫的用户体验"><a href="#酷炫的用户体验" class="headerlink" title="酷炫的用户体验"></a>酷炫的用户体验</h3><ol><li>在按钮和其它表单域元素使用 <code>微交互（microinteractions）</code>。比如，点击上传按钮之后，提示文字可以变为 “正在上传” 或者 “处理中”。</li><li><code>不要使用 scroll jacking</code> （译注：通过重新定义鼠标滚动速度、幅度达到控制可视区域视觉效果的方式）！不要打乱浏览器的默认行为，虽然你可能会觉得让滚动速度变成原来的两倍很不错，但事实并非如此。</li><li><code>放弃使用首页轮播</code>。轮播会减少转化率，可以考虑使用更佳的方法来在有限空间显示更多信息。</li><li><code>不要使用欢迎界面</code>。当用户第一次打开首页时，用户希望能直接看到首页内容。</li><li>使用 <code>标题、副标题、头段落、列表、表格标题</code> 让你的内容更容易被检索。大部分人在浏览网页前，都会先检索一遍全文，再决定是否阅读。</li><li>添加 <code>描述性的占位符文字</code> 到你的表单、输入框和下拉菜单。如果你想要让浏览者用某种特定方式来填写表单，你应该指引他怎么做。对于下拉菜单和选择框来说，可以让第一个选项变成描述，比如 “选择年份” 就比 “2016” 更合适。</li><li>往表单添加 <code>HTML5 验证</code>，让用户在提交表单时可以清楚地知道哪些部分出现填写错误。</li><li>通过避免含糊链接名字、减少杂乱排版、使用标点符号、保持简洁布局、添加图片提示（alt text）、使用大字号、保持文本和背景色的高对比度，可以让你的网站 <code>适用于视觉障碍人群</code>。</li><li>通过 <a href="http://brokenlinkcheck.com/" target="_blank" rel="noopener">BrokenLinkCheck.com</a> 检查你的网站是否有 <code>损坏的链接</code>。修复这些坏链，避免让用户因为点击到它们而抓狂。</li></ol><h3 id="酷炫的开发"><a href="#酷炫的开发" class="headerlink" title="酷炫的开发"></a>酷炫的开发</h3><ol><li>确保你的站点是经过 <code>移动端优化</code> 的，也就是在任何设备上都可以响应式地显示。合理优化移动端的站点，加载速度更快，排行更高，并且可以提供更佳的用户体验。</li><li>生成并 <code>显示经过优化的图像</code>。假设你上传了一张大图片，比如博文的特征图像，如果你想在站点的其他地方显示（比如侧边栏），应确保你在侧边栏显示的是图像的缩略图而非原图。</li><li><code>所有图片和超链接都要添加 alt 和 title 属性</code>。当遇到某种异常情况，图片没有正常加载出来的时候，网站应该在图片位置显示替换文字（alt text）。并且，当鼠标悬停在链接时，浏览器应该显示该链接的 title 属性的值。</li><li>使用 <code>&lt;strong&gt;</code> 和 <code>&lt;em&gt;</code> 标签代替 <code>&lt;b&gt;</code> and <code>&lt;i&gt;</code>，以输出加粗和斜体字符。虽然他们的作用相同，但是有着根本区别。<code>&lt;b&gt;</code> 标签对应着一种样式，而 <code>&lt;strong&gt;</code> 标签则是一种语义化的表示，指明了应该如何理解这个标签的含义。</li><li><code>去除多余的 HTML</code>。当你复制粘贴内容到 WYSIWYG 编辑器（类似于 WordPress 的编辑器）的时候，它会添加许多不必要的 span 标签与内联样式。时间长了，你的网站代码就会变得不可读了。</li><li>说到这里，需要给你的 HTML <code>移除内联样式</code>。99% 的样式规则都应该写进 CSS 文件，以便你可以在同一时间更新一个组件在所有页面的样式。</li><li>使用 <code>Sass 变量</code> 代替原生 CSS，以保持颜色和其他组件可以在整个网站之间共用。这样，当你想要改变这个颜色时，只需改变一行代码而不是上百行。</li><li><code>链接使用永久链接（permalinks）代替完整 URL</code>。当你打算切换域名时，你的链接最好使用 &lt;a href=“/slug-goes-here”&gt; 代替完整路径 &lt;a href=“<a href="http://domain.com/slug-goes-here”&gt;。对于一些图片资源和" target="_blank" rel="noopener">http://domain.com/slug-goes-here”&gt;。对于一些图片资源和</a> CSS 背景，如果你不这么做，当域名变化的时候，你的所有资源都将会失效。</li><li>开发一个 <code>自定义插件</code> 或者工具，为你的网站提供独特的功能。虽然自定义软件难以维护，但是这样做可以让你的网站在众多类似网站中脱颖而出。</li><li>测试 <code>跨浏览器兼容性</code>，确保你的网站可以在 Chrome, Firefox, Safari, Internet Explorer 和其它浏览器正常显示。虽然旧版 IE 在兼容性方面臭名昭著，但是可以通过 <a href="https://www.browserstack.com/screenshots" target="_blank" rel="noopener">BrowserStack</a> 进行人工检查。</li><li>使用 <a href="https://validator.w3.org/" target="_blank" rel="noopener">W3C 的</a> <code>Markup Validation Service（标记语言验证服务）</code> 来检查 HTML 的明显错误。要记住，大部分网站的 HTML 都不是十分完善的。虽然这项检查并非最高优先级，但是如果你的 HTML 没有错误，你会感到更开心。</li><li>设定一个 <code>模拟环境</code> 用来改变你的当前网站。理想情况下，你应该有一个生产环境，是用户能看见的；以及一个模拟环境，供开发者作出更改。一旦更改已经准备好发布，就可以把模拟环境的代码部署到生产环境。</li><li><code>在页面显示当前年份</code>。当你看见一个站点的 copyright 年份不是最新的时候，你就会觉得这个网站应该很久没维护了。可以使用 PHP 或者类似的脚本语言，动态地显示当前年份，而不仅仅是显示静态文本。（比如 © <established year=""> — <current year="">）。</current></established></li></ol><h3 id="酷炫的搜索引擎优化"><a href="#酷炫的搜索引擎优化" class="headerlink" title="酷炫的搜索引擎优化"></a>酷炫的搜索引擎优化</h3><ol><li><code>为每个页面选择一个关键词</code>，这个关键词关系到你的页面排名。围绕这个关键词，优化这个页面的方方面面。当然，并不是让你在每句话都提到这个词，可以动脑筋想想你想让它排到第几位去。</li><li>给每个页面设定一个充满关键词的 <code>title 标签</code>。标题会显示在谷歌搜索结果的蓝色链接文字上，有 55 个字符的长度限制。</li><li>每个页面<code>有且仅有一个 H1 标签</code>。在大多数情况下，这个标签的文字应该和 title 标签相同。</li><li>在页面内容中包含很多 <code>H2、H3 和 H4 标签</code> ，以创建小标题和显出视觉层次感。</li><li>用一个 <code>特定的关键词</code> 优化页面，可以通过把它包含在标题、H1、副标题和内容的前 1/3 部分。</li><li>你的 <code>meta 标签的描述（description）</code> 会显示在搜索引擎的链接下方。所以确保你的每个页面都包含 meta description，并确保在描述里包含关键词。</li><li>你的 <code>永久链接（permalink）</code>，也就是 URL 里紧随域名的部分（比如 domain.com/permalink-here/），应该包含破折号分隔开的关键词内容。</li><li>Google 把 <code>域名的注册时长</code> 考虑到算法中，他们认为，注册时间长的域名更有可能提供高质量的资源。提前注册你的域名吧，如果你的域名注册时间超过 10 年，相信你对你的事业是认真的。</li><li>平均起来，SERP (搜索引擎结果页面) 的第一个结果，不管是任何关键词，打开的页面都不少于 <code>2000 字/页</code>。当你写文章或者创建页面时，如果你希望页面的排名更高，试着至少写 2000 字吧。</li><li>总是 <code>创建站点地图</code> 并命名为 sitemap.xml 文件，然后把它放进根目录，并让文件可以通过 domain.com/sitemap.xml 访问。这个文件可以告诉谷歌，你的所有页面的位置，并应该在添加新内容时更新地图。可以通过 <a href="https://www.google.com/webmasters/tools/home?hl=en" target="_blank" rel="noopener">Webmaster Tools</a> 提交给谷歌。</li><li>添加你的网站的 <code>Google Webmaster Tools</code>，然后你可以知道 Google 如何索引你的站点，并在遇到关键问题时保持更新。</li><li>为了提高图片的排行，上传之前应该总是 <code>重命名你的图片</code> 和其它文件。（比如：rank_for_this_keyword_phrase.png）</li><li>在站点中包含 <code>robots.txt</code> 文件，告诉爬虫哪些页面应该/不应该被索引。</li><li>添加 <code>canonical 重定向</code> 把不带 www 的页面访问指向网站的 www 版本，或者反过来也可以。</li><li>研究并整合每个页面的 <code>LSI 关键词</code>（LSI: 潜在语义索引），以帮助提高页面在主关键词的排行。通过 Google 搜索一些关键词短语并寻找 “相关搜索” 链接，可以帮你找出 LSI 关键词。</li><li>经常确保 <code>你的内容之间可以互相连接</code>。你的站点的每个页面，都应该可以通过从首页开始的不多于三次点击访问到。</li><li>添加 <code>结构化的数据</code> 到相关页面，以帮助 Google 合理索引你的内容。以下这些页面类型需要结构化的数据，包括：人物、产品、事件、公司、电影、书本、报刊评论等。使用 <a href="http://schema-creator.org/" target="_blank" rel="noopener">Schema Creator</a> 可以帮你生成结构化的数据。</li><li>使用 <a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener">Google 的</a> <code>PageSpeed Insights</code> 工具，以确保你修复了所有可能降低页面速度的普遍问题。页面加载速度越快，排名越高。</li></ol><h3 id="酷炫的网页速度"><a href="#酷炫的网页速度" class="headerlink" title="酷炫的网页速度"></a>酷炫的网页速度</h3><ol><li>保持 <code>页面流量低于 2MB</code>。使用 <a href="http://tools.pingdom.com/" target="_blank" rel="noopener">tools.pingdom.com</a> 检查主页面的加载流量，如果多于 2MB 说明内容太多了。</li><li>保持 <code>页面请求低于 50 个</code>。页面中的每个文件和图片都是一个 HTTP 请求，请求数越少，加载速度越快。平均每个网页的请求数是 70 个。使用 <a href="https://gtmetrix.com/" target="_blank" rel="noopener">GTmetrix</a> 可以检查你的网页请求数。</li><li>设计页面元素时，使用 <code>CSS 代替背景图片</code>。不要使用图片来显示按钮、表单或者其它通用的元素。CSS 的加载速度更快，并且在响应式布局中更加灵活。</li><li>在图片上传之前 <code>优化图像</code>。比如 <a href="https://tinypng.com/" target="_blank" rel="noopener">TinyPNG</a> 这样的工具，可以帮助你在不降低分辨率或者图像质量的情况下，减少图片文件大小。</li><li>使用 <code>内容分发网络（Content Delivery Network）</code> 来存储你的图片和其它大文件，并放在世界上的不同区域中。CDN 通过策略定位好的服务器，存储分发你的文件，可以最大化加速页面速度，当然加载速度也根据访客的所在地区而有所差别。</li><li>在上传你的代码文件到服务器之前，通过编译和压缩工具，<code>最小化 JavaScript, HTML 和 CSS</code>。对于 JavaScript，可以使用 <a href="https://developers.google.com/closure/compiler/" target="_blank" rel="noopener">Closure Compiler</a>。对于 HTML，可以使用 <a href="http://www.willpeavy.com/minifier/" target="_blank" rel="noopener">HTML Minifier</a>。对于 CSS，可以使用 <a href="http://yui.github.io/yuicompressor/" target="_blank" rel="noopener">YUI Compressor</a>。</li><li>把 <code>阻塞渲染的 JavaScript 移动到底部</code>。唯一应该放在头部的脚本是那些会立刻影响页面设计的内容（比如：自定义字体）。</li><li><code>避免目标网页重定向</code>。重定向触发额外的 HTTP 请求，会延迟页面渲染。</li><li>借助 <code>浏览器缓存</code>，可以通过为页面和不经常更新的资源设置过期时间来实现。浏览器缓存会通知浏览器，从本地磁盘加载之前下载过的页面，以减少不必要的网络请求。</li><li>在服务器配置中启用 <code>gzip 压缩</code>。压缩可以减少多达 90% 的传输响应时间，大大减少了首次渲染页面的时间。</li><li>在服务器配置中启用 <code>Keep-Alive</code>，以允许同一个 TCP 链接可以发送和接收多个 HTTP 请求，因而可以减少后来请求的延迟。</li><li>升级为 <code>专用服务器</code> 或者更优质的主机服务，以降低服务器响应时间。当你使用共享的服务器环境时，你的站点通常放在一台需要同时响应至少上百个网站的服务器里，如果其它网站的流量很大，你的网站速度自然就会降低。</li></ol><h3 id="酷炫的平面设计"><a href="#酷炫的平面设计" class="headerlink" title="酷炫的平面设计"></a>酷炫的平面设计</h3><ol><li>作为可选的加分项，使用 <code>自定义 ebook 封面</code>。它不难创建，但是可以让你的转化率大大提高。</li><li>为你的主页和销售页面设计一个 <code>自定义的平面图形或者插图</code>。一个专门为站点设计的好插图，可以让你的站点更加容易让人记住。</li><li>创建一个或者一系列的自定义 <code>博客特征图像设计</code>。也就是你在 Facebook, Twitter, Pinterest 等社交网站传播时使用的图片。当用户看到和博客有所关联的某类型的图片时，他们会联想到文章可能是你写的。</li><li>给你自己和你的团队的每个成员显示一张自定义的 <code>头像插图或者漫画</code>。相比于聘请专业的摄影师，自定义的漫画成本较低，特别是当你的团队增加新成员的时候。此外，对于新成员来说这也是一份不错的礼物。</li><li><code>自定义图表</code> 以可视化的方式显示数据和其他内容，相比于同类的博客文章，更容易获取更多流量。人们更喜欢在 Pinterest 这样的网站上分享图表，或者是带着你的站点的反向链接并转发到他们自己的网站上。</li><li>如果你创作了一个甚至一系列的视频，你应该拥有一个 <code>定制的视频开场部分和/或结尾部分</code>，让大家感受到视频是专业的。不要提及其它的视频画面或者动画，可以帮助你的品牌更加突出。</li></ol><h3 id="酷炫的-Web-安全性"><a href="#酷炫的-Web-安全性" class="headerlink" title="酷炫的 Web 安全性"></a>酷炫的 Web 安全性</h3><ol><li>安装 <code>SSL 证书</code>，以允许服务器端和浏览器之间建立安全连接。如果网站用到银行卡支付功能，大部分的检测软件都要求使用 SSL 证书。Google 称，用上 SSL 证书可以帮助提高网站的搜索排行。</li><li>你用到的软件和插件要 <code>保持最新版本</code>。Wordpress 和其它 CMS 软件都会释放更新，通常是为了修复漏洞。如果你没有及时更新，你的网站被攻击也就是迟早的事情了。</li><li>为管理员页面设置 <code>双认证登录</code>。大部分的黑客入侵都是从登录页开始的。</li><li>检查并 <code>删除恶意软件</code>。如果你的网站曾经被入侵，黑客很可能会留下一些不容易发现的后门。如果你没有及时删除，你的网站可能会被谷歌列入黑名单，大大降低你的网站排行，并在用户打开网站时，警告用户离开。</li><li>不要把 <code>管理员账号</code> 称为 “admin”。删除默认的管理员账号，并创建一个使用其他名字的新账号。</li><li>定期 <code>备份数据库和网站文件</code>。大部分备份软件和插件都只备份你的数据库，里面包括了数据和内容。但如果你把整个网站都丢了，你还需要文件内容的备份来还原网站。</li></ol><h3 id="酷炫的内容"><a href="#酷炫的内容" class="headerlink" title="酷炫的内容"></a>酷炫的内容</h3><ol><li>创建一个自定义 <code>错误 404</code> 页面，当用户尝试访问不存在的地址时，这个页面就会显示出来。可以使用 404 页面把他们引导到首页，并帮助他们寻找他们想要的页面。</li><li>除了主页之外，<code>关于页面</code> 可能是用户最常访问的页面了。要确保这个页面能够很好地代表你和你的公司。</li><li><code>联系方式页</code> 帮助用户找到你，而且还能够建立你和访客甚至 Google 之间的信赖。当决定站点排名时，机器会寻找你的联系方式，然后找到邮箱地址、电话号码和地址。联系信息告诉 Google，这个站点更加值得信赖一点。</li><li>在战略上，站点里拥有选填的表单是正确的，然而建立一个 <code>准顾客收集页面</code> 的想法也不错，除了一个高转化率的选填表格什么也不用放。当你希望用户提交信息时，链接到该页面就行了。</li><li>当用户订阅你的列表时，确保你可以给他们一个 <code>确认页面</code>，让他们可以确认邮箱地址。假如用户不能确认邮箱是否正确，他们可能就会把事情给忘了，然后再也不会回来你的站点了。</li><li>在点击邮箱里的确认链接后，给用户发送一个 <code>感谢页面</code> 让他们知道下一步可以做什么。这个页面是每个订阅者都能看见而且只能看见一次的，因此这是一个绝佳机会鼓励用户去掏腰包购买内容。</li><li>你的网站或者主题应该有一个 <code>着陆页</code> 模板，当你需要用户进行特定操作时，可以用上。</li><li>如果你在网站上买东西，确保你有一个漂亮的 <code>销售页面</code>。从大字标题开始；为你的卖场留出足够空间；有可能的话做一个介绍视频；在页面底部指引用户如何购买。</li></ol><h3 id="酷炫的社交媒体"><a href="#酷炫的社交媒体" class="headerlink" title="酷炫的社交媒体"></a>酷炫的社交媒体</h3><ol><li>在你的文章和页面上，限制 <code>社交媒体按钮的数量</code>，因为每个按钮都会运行相关的脚本，额外增加页面加载时间。通常包含 1-5 个按钮比较合适，比如 Facebook、Twitter、LinkedIn、Pinterest、Google+ 等，这些网站是你的内容最容易被分享的地方。</li><li>在你的 Facebook 页面、Twitter 账号、YouTube 频道上创建 <code>社交媒体的图片</code>。对于第一次访问的用户，自定义的图片可以给予他们良好的第一印象，并鼓励他们点赞、关注、订阅你的页面、个人档和频道。</li><li>设置 <code>Facebook Open Graph META 标签</code> 以确保你的内容被分享到 Facebook 时可以正常显示内容。可以使用 <a href="https://developers.facebook.com/tools/debug/" target="_blank" rel="noopener">Facebook Debugger</a> 检查你的主页、文章和其它页面，并看到当别人把 URL 分享出去的时候是什么样子的。</li><li>设置 <code>Twitter Cards</code>，目的是当你的站点 URL 被分享到 Twitter 时，丰富的图片和视频资源可以显示到卡片上。要开始使用 <code>Twitter Cards</code> 可以 <a href="https://dev.twitter.com/cards/getting-started" target="_blank" rel="noopener">点击这里</a></li><li>设置 <code>Google+ Snippets</code>，以自定义用户分享站点到 Google+ 时看见的内容。你可以使用 <a href="https://developers.google.com/+/web/snippet/" target="_blank" rel="noopener">Snippet 指南</a> 生成相关代码。即使你的网站在 Google+ 没那么受欢迎，Google 也可以知道你正确地添加了 meta 信息，从而带来一定的权重加成。</li><li><code>弱化那些链接到个人档的社交媒体图标</code>，可以让图标变小或者放在页面底部。其实社交媒体营销的目的就是把用户导流到你的网站来，而不是反过来作用。</li></ol><p>好了，我还有什么遗漏的吗？作为自由职业者或者老板，你有没有尝试过使用上述方法让网站变得酷炫呢？</p><p>期待你的回复，可以在原文留言或者在推特上联系 <a href="https://twitter.com/wntart" target="_blank" rel="noopener">@wntart</a>。</p><p>如果你希望更多人看见这个列表，不妨推荐这篇文章给大家。让我们一起把网站变得更加酷炫！</p><p>加油！尼克</p><p>  P.S. 如果你需要有人帮忙完成列表上的事情，可以在这里寻找<a href="https://www.awesomeweb.com/skill/web-design" target="_blank" rel="noopener">设计师</a>、<a href="https://www.awesomeweb.com/skill/web-development" target="_blank" rel="noopener">开发者</a>，或者<a href="https://www.awesomeweb.com/why-post-a-job" target="_blank" rel="noopener">发布你的招聘广告</a>。我们拥有世界上最好的自由职业者，他们非常乐意帮助你！</p><p>如果你也希望加入 AwesomeWeb 成为一名自由职业者，并认识更多客户，可以<a href="https://www.awesomeweb.com/signup" target="_blank" rel="noopener">点击这里注册</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原文链接 : &lt;a href=&quot;https://medium.freecodecamp.com/101-ways-to-make-your-website-more-awesome-79c934dd2a11#.enfq945da&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;101 Ways to Make Your Website More Awesome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原文作者 : &lt;a href=&quot;https://medium.freecodecamp.com/@wntart&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Nicholas Tart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译文出自 : &lt;a href=&quot;https://github.com/xitu/gold-miner&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;掘金翻译计划&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译者 : &lt;a href=&quot;https://github.com/zhangjd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;达仔&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;校对者: &lt;a href=&quot;https://github.com/jamweak&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jamweak&lt;/a&gt;、&lt;a href=&quot;https://github.com/cyseria&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;cyseria&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;上周，我和一位老客户聊天，她说：“尼克，我觉得我的网站需要改进，但我不能确定我具体需要做什么。”&lt;/p&gt;
&lt;p&gt;然后我就去问了一圈，包括朋友、家人和其他非互联网行业的商务人士，他们都提到了相同的观点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“我需要一个检查清单，因为我不知道怎样建站，这也是我要雇人来做这件事情的原因。但是我依然需要知道这个过程涉及到哪些方面。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此，我列了一个我们在 &lt;a href=&quot;https://awesomeweb.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AwesomeWeb&lt;/a&gt; 上完成的优化清单（以及一些我们还没完成的）。&lt;/p&gt;
&lt;p&gt;我敢保证:&lt;/p&gt;
&lt;p&gt;如果你能把列表的每一项问题都改好，你将会拥有业界里最好的网站之一。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;你是怎么知道的？&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.tgf21.com/tags/JavaScript/"/>
    
      <category term="前端" scheme="http://www.tgf21.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="优化" scheme="http://www.tgf21.com/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>浅谈JS的柯里化</title>
    <link href="http://www.tgf21.com/post/62d6d33c.html"/>
    <id>http://www.tgf21.com/post/62d6d33c.html</id>
    <published>2017-06-24T09:28:07.000Z</published>
    <updated>2018-12-03T03:00:25.252Z</updated>
    
    <content type="html"><![CDATA[<!-- 公司一个同事，今天突然问我 -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- 公司一个同事，今天突然问我 --&gt;

      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.tgf21.com/tags/JavaScript/"/>
    
      <category term="柯里化" scheme="http://www.tgf21.com/tags/%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Flex布局学习笔记</title>
    <link href="http://www.tgf21.com/post/d15bd75e.html"/>
    <id>http://www.tgf21.com/post/d15bd75e.html</id>
    <published>2017-05-09T07:51:56.000Z</published>
    <updated>2018-12-03T03:00:25.240Z</updated>
    
    <content type="html"><![CDATA[<p>布局一直是web页面中的重要话题，以前最常见的就是盒子模型的布局，再加上 <code>position</code> 以及 <code>float</code> 属性来完成基本的页面布局。当然我们用的最多的，还是由<code>Bootstrap</code>封装过的栅格流水式布局，例如：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="row"&gt;</span><br><span class="line">  &lt;div class="col-md-8"&gt;.col-md-8&lt;/div&gt;</span><br><span class="line">  &lt;div class="col-md-4"&gt;.col-md-4&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class="row"&gt;</span><br><span class="line">  &lt;div class="col-md-4"&gt;.col-md-4&lt;/div&gt;</span><br><span class="line">  &lt;div class="col-md-4"&gt;.col-md-4&lt;/div&gt;</span><br><span class="line">  &lt;div class="col-md-4"&gt;.col-md-4&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class="row"&gt;</span><br><span class="line">  &lt;div class="col-md-6"&gt;.col-md-6&lt;/div&gt;</span><br><span class="line">  &lt;div class="col-md-6"&gt;.col-md-6&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>但是，并不是每一个项目都需要<code>Bootstrap</code>, 而且其本身也存在不少的limitation，其实在2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持。曾经大致了解过这么一种新的方案，但是并不曾深入，今天正好有机会再次温习和总结一下这种用法。</p><a id="more"></a><h2 id="Flex简介"><a href="#Flex简介" class="headerlink" title="Flex简介"></a>Flex简介</h2><p>Flex 指的是弹性布局，使用它会改变浏览器默认从左往右从上到下的元素平铺方式，提供更加灵活可控的页面布局方式。<br>任何一个容器或者元素都可以指定为flex布局。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.inline-element</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>当然咯，指定为flex布局以后，子元素的 <code>float</code> <code>clear</code> <code>vertical-align</code> 属性将会失效。</p></blockquote><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Flex的核心概念就是<code>容器</code>和<code>轴</code>。容器包括外层的 父容器 和内层的 子容器，轴包括 主轴 和 交叉轴，可以说 flex 布局的全部特性都构建在这两个概念上。flex 布局涉及到 12 个 CSS 属性（不含 display: flex），其中父容器、子容器各 6 个。不过常用的属性只有 4 个，父容器、子容器各 2 个。</p><img src="/post/d15bd75e/flexbox.png"><p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end.</p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>容器上有六个属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">flex-direction</span></span><br><span class="line"><span class="selector-tag">flex-wrap</span></span><br><span class="line"><span class="selector-tag">flex-flow</span></span><br><span class="line"><span class="selector-tag">justify-content</span></span><br><span class="line"><span class="selector-tag">align-items</span></span><br><span class="line"><span class="selector-tag">align-content</span></span><br></pre></td></tr></table></figure><h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><p>决定主轴 元素的排列方向 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>四个可能值分别是：</p><ul><li>row（默认值）：主轴为水平方向，起点在左端。</li><li>row-reverse：主轴为水平方向，起点在右端。</li><li>column：主轴为垂直方向，起点在上沿。</li><li>column-reverse：主轴为垂直方向，起点在下沿。</li></ul><h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><p>此属性是定义在元素一行排不下的时候的行为。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个可能值：</p><ul><li>nowrap（默认）：不换行。</li><li>wrap：换行，向下拓展。</li><li>wrap-reverse: 换行, 向上拓展。</li></ul><h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p>此属性是 <code>flex-direction</code> 和 <code>flex-wrap</code> 的简写形式，默认值是row nowrap</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p>定义了元素在主轴上的对齐方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>五个可能值：</p><ul><li>flex-start（默认值）：左对齐</li><li>flex-end：右对齐</li><li>center： 居中</li><li>space-between：两端对齐，项目之间的间隔都相等。</li><li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul><h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p>定义了元素在交叉轴的对齐方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>五个可能值：</p><ul><li>flex-start：交叉轴的起点对齐。</li><li>flex-end：交叉轴的终点对齐。</li><li>center：交叉轴的中点对齐。</li><li>baseline: 项目的第一行文字的基线对齐。</li><li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul><h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p>定义了多跟轴线的对其方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能有6个取值：</p><ul><li>flex-start：与交叉轴的起点对齐。</li><li>flex-end：与交叉轴的终点对齐。</li><li>center：与交叉轴的中点对齐。</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li>stretch（默认值）：轴线占满整个交叉轴。</li></ul><h2 id="元素自己的属性"><a href="#元素自己的属性" class="headerlink" title="元素自己的属性"></a>元素自己的属性</h2><p>元素上也有六个属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">order</span></span><br><span class="line"><span class="selector-tag">flex-grow</span></span><br><span class="line"><span class="selector-tag">flex-shrink</span></span><br><span class="line"><span class="selector-tag">flex-basis</span></span><br><span class="line"><span class="selector-tag">flex</span></span><br><span class="line"><span class="selector-tag">align-self</span></span><br></pre></td></tr></table></figure><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><p>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p>属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p><h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</p><h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间</p><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">'flex-grow'</span>&gt; &lt;<span class="string">'flex-shrink'</span>&gt;? || &lt;<span class="string">'flex-basis'</span>&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</p><p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值</p><h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致.</p><h2 id="有趣的Flex游戏"><a href="#有趣的Flex游戏" class="headerlink" title="有趣的Flex游戏"></a>有趣的Flex游戏</h2><p>这个页面小游戏，一步步的让我们联系flex的使用，通关了，flex也就基本学会了。</p><p>地址： <a href="http://flexboxfroggy.com" target="_blank" rel="noopener">http://flexboxfroggy.com</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;布局一直是web页面中的重要话题，以前最常见的就是盒子模型的布局，再加上 &lt;code&gt;position&lt;/code&gt; 以及 &lt;code&gt;float&lt;/code&gt; 属性来完成基本的页面布局。当然我们用的最多的，还是由&lt;code&gt;Bootstrap&lt;/code&gt;封装过的栅格流水式布局，例如：&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div class=&quot;row&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;div class=&quot;col-md-8&quot;&amp;gt;.col-md-8&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;div class=&quot;col-md-4&quot;&amp;gt;.col-md-4&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div class=&quot;row&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;div class=&quot;col-md-4&quot;&amp;gt;.col-md-4&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;div class=&quot;col-md-4&quot;&amp;gt;.col-md-4&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;div class=&quot;col-md-4&quot;&amp;gt;.col-md-4&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div class=&quot;row&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;div class=&quot;col-md-6&quot;&amp;gt;.col-md-6&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;div class=&quot;col-md-6&quot;&amp;gt;.col-md-6&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是，并不是每一个项目都需要&lt;code&gt;Bootstrap&lt;/code&gt;, 而且其本身也存在不少的limitation，其实在2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持。曾经大致了解过这么一种新的方案，但是并不曾深入，今天正好有机会再次温习和总结一下这种用法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Css" scheme="http://www.tgf21.com/tags/Css/"/>
    
      <category term="Web" scheme="http://www.tgf21.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript编译器如何工作[转]</title>
    <link href="http://www.tgf21.com/post/8464b9e6.html"/>
    <id>http://www.tgf21.com/post/8464b9e6.html</id>
    <published>2017-04-26T11:47:05.000Z</published>
    <updated>2018-12-03T03:00:25.242Z</updated>
    
    <content type="html"><![CDATA[<p>当我们谈论JavaScript引擎的时候，通常是指它的编译器，一个把人类可读的源代码（本文中指JavaScript代码）翻译成机器可读的指令的程序。如果你还没考虑过你的代码在运行时会发生什么，那么这听起来可能相当神奇，但编译本质上只是一个翻译练习，让代码运行的快才是神奇的。</p><h2 id="简单编译器是怎么工作的"><a href="#简单编译器是怎么工作的" class="headerlink" title="简单编译器是怎么工作的"></a>简单编译器是怎么工作的</h2><p>JavaScript被认为是高级语言，这意味着它是人类可读的并且具有高度的灵活性。编译器的工作是把高级语言转换成计算机本地指令。</p><img src="/post/8464b9e6/1.jpg"><p>一个简单的编译程序有四个处理过程：词法分析器、解析器、翻译器、解释器。</p><a id="more"></a><ol><li>词法分析器（或者说是扫描器，分词器），扫描源码并把它转换为原子单位，称为记号。最常见的实现是使用正则表达式进行模式匹配。</li><li>被标记化之后的代码被传入解析器，解析器对代码结构和作用范围进行识别和编码，生成语法树。</li><li>这种类似图的结构之后被传入翻译器翻译成字节码。其中最简单的实现是把一个庞大的switch语句标记映射成等价的字节码。</li><li>然后字节码被传入字节码解释器，被转换为本机代码。</li></ol><p>这是经典的编译器设计，已经存在了很多年。但是桌面程序和浏览器的要求有很大不同。这种经典的结构在多个方面都有缺陷。解决这些问题的创新方式，是浏览器的速度竞赛故事。</p><h2 id="快速、轻量、正确"><a href="#快速、轻量、正确" class="headerlink" title="快速、轻量、正确"></a>快速、轻量、正确</h2><p>JavaScript语言是非常灵活和具有兼容性的程序结构。那么你怎么写这种后期绑定、弱类型、动态语言的编译器呢？在你使它变快之前，必须先使它变精确，或者像Brendan Eich说的，</p><p>“快速、轻量、正确。任意选择两个，只要（结果）是正确的”</p><p>一种创新的测试编译器正确性的方式是“模糊测试”。Mozilla的Jesse Ruderman创建的jsfunfuzz正是这个目的。Brendan称它为“JavaScript 嘲弄产生器”，因为它的目的是创造怪异但是语法有效的结构，然后看编译器能否处理。这种工具在验证编译错误和边界问题上非常有帮助。</p><h2 id="JIT-编译器"><a href="#JIT-编译器" class="headerlink" title="JIT 编译器"></a>JIT 编译器</h2><p>经典结构的原则性问题是运行时的字节码翻译非常慢。在编译过程中，将字节码翻译成机器代码时增加一个步骤可以带来性能提升。不幸的是停留几分钟在网页上等待它完全编译是不会让你的浏览器流行的。</p><p>解决方案是由JIT提出的“懒编译”，或者叫实时编译。顾名思义，它只将你用到的这部分代码实时编译成机器代码。JIT编译器有多种多样，各自有各自的优化策略。比如正则表达式编译器致力于优化单个任务，而其它的编译器可能优化像循环或函数这些常见操作。现代化的JavaScript引擎会用到多种编译器，分工合作，从而你代码的性能得到提升。</p><h2 id="JavaScript-JIT-编译器"><a href="#JavaScript-JIT-编译器" class="headerlink" title="JavaScript JIT 编译器"></a>JavaScript JIT 编译器</h2><p>第一个JavaScript JIT编译器是Mozilla的TraceMonkey。这是一个“跟踪JIT”，因为它的跟踪路径是从你的代码中寻找常见的可执行代码段。然后这些“常见代码段”被编译成机器代码。和以前的引擎相比，Mozilla的这种优化可以带来20%-40%的性能提升。</p><p>在TraceMonkey推出后不久，谷歌就发布了拥有全新V8引擎的Chrome浏览器。V8引擎是为速度而生。一个关键的设计是它完全跳过了字节码生成，取而代之的是由翻译器产生本地机器代码。V8团队在一年之内已经实现了寄存器分配、改善高速缓存、重写正则引擎，使其比原来快了10倍。他们JavaScript整体执行速度被提高了150％。速度竞赛才刚刚开始。</p><p>最近浏览器厂商都纷纷推出了含有一个附加步骤的优化编译器。在定向流图（DFG）或语法树生成之后，编译器可以使用这方面知识，在机器代码产生之前进一步优化性能。Mozilla的IonMonkey和Google的Crankshaft就是DFG编译器的例子。</p><p>所有这些别具匠心的设计，其宏伟的目标就是使Javascript代码运行的和本地C代码一样快。这个目标在几年前听起来好像是在搞笑，现在已经越来越近。在第三部分，我们将看到编译器的设计者使用多种策略，开发速度更快的Javascript编译器。</p><blockquote><p>英文原文：John Dalziel<br>译文链接： <a href="http://blog.jobbole.com/41184/" target="_blank" rel="noopener">http://blog.jobbole.com/41184/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我们谈论JavaScript引擎的时候，通常是指它的编译器，一个把人类可读的源代码（本文中指JavaScript代码）翻译成机器可读的指令的程序。如果你还没考虑过你的代码在运行时会发生什么，那么这听起来可能相当神奇，但编译本质上只是一个翻译练习，让代码运行的快才是神奇的。&lt;/p&gt;
&lt;h2 id=&quot;简单编译器是怎么工作的&quot;&gt;&lt;a href=&quot;#简单编译器是怎么工作的&quot; class=&quot;headerlink&quot; title=&quot;简单编译器是怎么工作的&quot;&gt;&lt;/a&gt;简单编译器是怎么工作的&lt;/h2&gt;&lt;p&gt;JavaScript被认为是高级语言，这意味着它是人类可读的并且具有高度的灵活性。编译器的工作是把高级语言转换成计算机本地指令。&lt;/p&gt;
&lt;img src=&quot;/post/8464b9e6/1.jpg&quot;&gt;
&lt;p&gt;一个简单的编译程序有四个处理过程：词法分析器、解析器、翻译器、解释器。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.tgf21.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Curl常用命令</title>
    <link href="http://www.tgf21.com/post/558ee8cc.html"/>
    <id>http://www.tgf21.com/post/558ee8cc.html</id>
    <published>2017-04-19T05:43:37.000Z</published>
    <updated>2018-12-03T03:00:25.254Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Download-a-Single-File"><a href="#Download-a-Single-File" class="headerlink" title="Download a Single File"></a>Download a Single File</h2><p>The following command will get the content of the URL and display it in the STDOUT (i.e on your terminal).</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://www.centos.org</span><br></pre></td></tr></table></figure><p>To store the output in a file, you an redirect it as shown below. This will also display some additional download statistics.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://www.centos.org &gt; centos-org.html</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100 27329    0 27329    0     0   104k      0 --:--:-- --:--:-- --:--:--  167k</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Save-the-cURL-Output-to-a-file"><a href="#Save-the-cURL-Output-to-a-file" class="headerlink" title="Save the cURL Output to a file"></a>Save the cURL Output to a file</h2><p>We can save the result of the curl command to a file by using -o/-O options.</p><ul><li>o (lowercase o) the result will be saved in the filename provided in the command line</li><li>O (uppercase O) the filename in the URL will be taken and it will be used as the filename to store the result</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -o mygettext.html http://www.gnu.org/software/gettext/manual/gettext.html</span><br></pre></td></tr></table></figure><p>Now the page gettext.html will be saved in the file named ‘mygettext.html’. You can also note that when running curl with -o option, it displays the progress meter for the download as follows.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line"> 66 1215k   66  805k    0     0  33060      0  0:00:37  0:00:24  0:00:13 45900</span><br><span class="line">100 1215k  100 1215k    0     0  39474      0  0:00:31  0:00:31 --:--:-- 68987</span><br></pre></td></tr></table></figure><p>When you use curl -O (uppercase O), it will save the content in the file named ‘gettext.html’ itself in the local machine.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -O http://www.gnu.org/software/gettext/manual/gettext.html</span><br></pre></td></tr></table></figure><blockquote><p>When curl has to write the data to the terminal, it disables the Progress Meter, to avoid confusion in printing. We can use ‘&gt;’|’-o’|’-O’ options to move the result to a file.</p></blockquote><h2 id="Fetch-Multiple-Files-at-a-time"><a href="#Fetch-Multiple-Files-at-a-time" class="headerlink" title="Fetch Multiple Files at a time"></a>Fetch Multiple Files at a time</h2><p>We can download multiple files in a single shot by specifying the URLs on the command line.<br>Syntax:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -O URL1 -O URL2</span><br></pre></td></tr></table></figure><p>The below command will download both index.html and gettext.html and save it in the same name under the current directory.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -O http://www.gnu.org/software/gettext/manual/html_node/index.html -O http://www.gnu.org/software/gettext/manual/gettext.html</span><br></pre></td></tr></table></figure><p>Please note that when we download multiple files from a same sever as shown above, curl will try to re-use the connection.</p><h2 id="Follow-HTTP-Location-Headers-with-L-option"><a href="#Follow-HTTP-Location-Headers-with-L-option" class="headerlink" title="Follow HTTP Location Headers with -L option"></a>Follow HTTP Location Headers with -L option</h2><p>By default CURL doesn’t follow the HTTP Location headers. It is also termed as Redirects. When a requested web page is moved to another place, then an HTTP Location header will be sent as a Response and it will have where the actual web page is located.</p><p>For example, when someone types google.com in the browser from India, it will be automatically redirected to ‘google.co.in’. This is done based on the HTTP Location header as shown below.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://www.google.com</span><br><span class="line"></span><br><span class="line">&lt;TITLE&gt;302 Moved&lt;/TITLE&gt;</span><br><span class="line">&lt;H1&gt;302 Moved&lt;/H1&gt;</span><br><span class="line">The document has moved</span><br><span class="line">&lt;A HREF=&quot;http://www.google.co.in/&quot;&gt;here&lt;/A&gt;</span><br></pre></td></tr></table></figure><p>The above output says that the requested document is moved to ‘<a href="http://www.google.co.in/’" target="_blank" rel="noopener">http://www.google.co.in/’</a>.</p><p>We can insists curl to follow the redirection using -L option, as shown below. Now it will download the google.co.in’s html source code.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -L http://www.google.com</span><br></pre></td></tr></table></figure><h2 id="Continue-Resume-a-Previous-Download"><a href="#Continue-Resume-a-Previous-Download" class="headerlink" title="Continue/Resume a Previous Download"></a>Continue/Resume a Previous Download</h2><p>Using curl -C option, you can continue a download which was stopped already for some reason. This will be helpful when you download large files, and the download got interrupted.</p><p>If we say ‘-C -‘, then curl will find from where to start resuming the download. We can also give an offset ‘-C <offset>’. The given offset bytes will be skipped from the beginning for the source file.</offset></p><p>Start a big download using curl, and press Ctrl-C to stop it in between the download.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -O http://www.gnu.org/software/gettext/manual/gettext.html</span><br><span class="line">##############             20.1%</span><br></pre></td></tr></table></figure><blockquote><p>Note: -# is used to display a progress bar instead of a progress meter.</p></blockquote><p>Now the above download was stopped at 20.1%. Using “curl -C -“, we can continue the download from where it left off earlier. Now the download continues from 20.1%.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -C - -O http://www.gnu.org/software/gettext/manual/gettext.html</span><br><span class="line">###############            21.1%</span><br></pre></td></tr></table></figure><h2 id="Limit-the-Rate-of-Data-Transfer"><a href="#Limit-the-Rate-of-Data-Transfer" class="headerlink" title="Limit the Rate of Data Transfer"></a>Limit the Rate of Data Transfer</h2><p>You can limit the amount at which the data gets transferred using –limit-rate option. You can specify the maximum transfer rate as argument.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl --limit-rate 1000B -O http://www.gnu.org/software/gettext/manual/gettext.html</span><br></pre></td></tr></table></figure><p>The above command is limiting the data transfer to 1000 Bytes/second. curl may use higher transfer rate for short span of time. But on an average, it will come around to 1000B/second.</p><p>The following was the progress meter for the above command. You can see that the current speed is near to the 1000 Bytes.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                               Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">1 1215k    1 13601    0     0    957      0  0:21:40  0:00:14  0:21:26   999</span><br><span class="line">1 1215k    1 14601    0     0    960      0  0:21:36  0:00:15  0:21:21   999</span><br><span class="line">1 1215k    1 15601    0     0    962      0  0:21:34  0:00:16  0:21:18   999</span><br></pre></td></tr></table></figure><h2 id="Download-a-file-only-if-it-is-modified-before-after-the-given-time"><a href="#Download-a-file-only-if-it-is-modified-before-after-the-given-time" class="headerlink" title="Download a file only if it is modified before/after the given time"></a>Download a file only if it is modified before/after the given time</h2><p>We can get the files that are modified after a particular time using -z option in curl. This will work for both FTP &amp; HTTP.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -z 21-Dec-11 http://www.example.com/yy.html</span><br></pre></td></tr></table></figure><p>The above command will download the yy.html only if it is modified later than the given date and time</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -z -21-Dec-11 http://www.example.com/yy.html</span><br></pre></td></tr></table></figure><p>The above command will download the yy.html, if it is modified before than the given date and time.</p><p>Please refer ‘man curl_getdate’ for the various syntax supported for the date expression</p><h2 id="Pass-HTTP-Authentication-in-cURL"><a href="#Pass-HTTP-Authentication-in-cURL" class="headerlink" title="Pass HTTP Authentication in cURL"></a>Pass HTTP Authentication in cURL</h2><p>Sometime, websites will require a username and password to view the content ( can be done with .htaccess file ). With the help of -u option, we can pass those credentials from cURL to the web server as shown below.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -u username:password URL</span><br></pre></td></tr></table></figure><blockquote><p>Note: By default curl uses Basic HTTP Authentication. We can specify other authentication method using –ntlm | –digest.</p></blockquote><h2 id="Download-Files-from-FTP-server"><a href="#Download-Files-from-FTP-server" class="headerlink" title="Download Files from FTP server"></a>Download Files from FTP server</h2><p>cURL can also be used to download files from FTP servers. If the given FTP path is a directory, by default it will list the files under the specific directory.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -u ftpuser:ftppass -O ftp://ftp_server/public_html/xss.php</span><br></pre></td></tr></table></figure><p>The above command will download the xss.php file from the ftp server and save it in the local directory.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -u ftpuser:ftppass -O ftp://ftp_server/public_html/</span><br></pre></td></tr></table></figure><p>Here, the given URL refers to a directory. So cURL will list all the files and directories under the given URL</p><p>If you are new to FTP/sFTP, refer ftp sftp tutorial for beginners.</p><h2 id="List-Download-using-Ranges"><a href="#List-Download-using-Ranges" class="headerlink" title="List/Download using Ranges"></a>List/Download using Ranges</h2><p>cURL supports ranges to be given in the URL. When a range is given, files matching within the range will be downloaded. It will be helpful to download packages from the FTP mirror sites.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl   ftp://ftp.uk.debian.org/debian/pool/main/[a-z]/</span><br></pre></td></tr></table></figure><p>The above command will list out all the packages from a-z ranges in the terminal.</p><h2 id="Upload-Files-to-FTP-Server"><a href="#Upload-Files-to-FTP-Server" class="headerlink" title="Upload Files to FTP Server"></a>Upload Files to FTP Server</h2><p>Curl can also be used to upload files to the FTP server with -T option.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -u ftpuser:ftppass -T myfile.txt ftp://ftp.testserver.com</span><br></pre></td></tr></table></figure><p>The above command will upload the file named myfile.txt to the FTP server. You can also upload multiple files at a same time using the range operations.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -u ftpuser:ftppass -T &quot;&#123;file1,file2&#125;&quot; ftp://ftp.testserver.com</span><br></pre></td></tr></table></figure><p>Optionally we can use “.” to get the input from STDIN and transfer to the remote.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -u ftpuser:ftppass -T - ftp://ftp.testserver.com/myfile_1.txt</span><br></pre></td></tr></table></figure><p>The above command will get the input from the user from Standard Input and save the contents in the ftp server under the name ‘myfile_1.txt’.</p><p>You can provide one ‘-T’ for each URL and the pair specifies what to upload where.</p><h2 id="More-Information-using-Verbose-and-Trace-Option"><a href="#More-Information-using-Verbose-and-Trace-Option" class="headerlink" title="More Information using Verbose and Trace Option"></a>More Information using Verbose and Trace Option</h2><p>You can get to know what is happening using the -v option. -v option enable the verbose mode and it will print the details</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v http://google.co.in</span><br></pre></td></tr></table></figure><p>The about command will output the following</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">* About to connect() to www.google.co.in port 80 (#0)</span><br><span class="line">*   Trying 74.125.236.56... connected</span><br><span class="line">* Connected to www.google.co.in (74.125.236.56) port 80 (#0)</span><br><span class="line">&gt; GET / HTTP/1.1</span><br><span class="line">&gt; User-Agent: curl/7.21.0 (i486-pc-linux-gnu) libcurl/7.21.0 OpenSSL/0.9.8o zlib/1.2.3.4 libidn/1.15 libssh2/1.2.6</span><br><span class="line">&gt; Host: www.google.co.in</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">* HTTP 1.0, assume close after body</span><br><span class="line">&lt; HTTP/1.0 200 OK</span><br><span class="line">&lt; Date: Tue, 10 Apr 2012 11:18:39 GMT</span><br><span class="line">&lt; Expires: -1</span><br><span class="line">&lt; Cache-Control: private, max-age=0</span><br><span class="line">&lt; Content-Type: text/html; charset=ISO-8859-1</span><br><span class="line">&lt; Set-Cookie: PREF=ID=7c497a6b15cc092d:FF=0:TM=1334056719:LM=1334056719:S=UORpBwxFmTRkbXLj; expires=Thu, 10-Apr-2014 11:18:39 GMT; path=/; domain=.google.co.in</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><p>If you need more detailed information then you can use the –trace option. The trace option will enable a full trace dump of all incoming/outgoing data to the given file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">=&gt; Send header, 169 bytes (0xa9)</span><br><span class="line">0000: 47 45 54 20 2f 20 48 54 54 50 2f 31 2e 31 0d 0a GET / HTTP/1.1..</span><br><span class="line">0010: 55 73 65 72 2d 41 67 65 6e 74 3a 20 63 75 72 6c User-Agent: curl</span><br><span class="line">..</span><br><span class="line">0060: 2e 32 2e 33 2e 34 20 6c 69 62 69 64 6e 2f 31 2e .2.3.4 libidn/1.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0070: 31 35 20 6c 69 62 73 73 68 32 2f 31 2e 32 2e 36 15 libssh2/1.2.6</span><br><span class="line">0080: 0d 0a 48 6f 73 74 3a 20 77 77 77 2e 67 6f 6f 67 ..Host: www.goog</span><br><span class="line">0090: 6c 65 2e 63 6f 2e 69 6e 0d 0a 41 63 63 65 70 74 le.co.in..Accept</span><br><span class="line">00a0: 3a 20 2a 2f 2a 0d 0a 0d 0a                      : */*....</span><br><span class="line">== Info: HTTP 1.0, assume close after body</span><br><span class="line">&lt;= Recv header, 17 bytes (0x11)</span><br><span class="line">0000: 48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d HTTP/1.0 200 OK.</span><br><span class="line">0010: 0a</span><br></pre></td></tr></table></figure><p>This verbose and trace option will come in handy when curl fails due to some reason and we don’t know why.</p><h2 id="Get-Definition-of-a-Word-using-DICT-Protocol"><a href="#Get-Definition-of-a-Word-using-DICT-Protocol" class="headerlink" title="Get Definition of a Word using DICT Protocol"></a>Get Definition of a Word using DICT Protocol</h2><p>You can use cURL to get the definition for a word with the help of DICT protocol. We need to pass a Dictionary Server URL to it.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl dict://dict.org/d:bash</span><br></pre></td></tr></table></figure><p>The above command will list the meaning for bash as follows</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">151 &quot;Bash&quot; gcide &quot;The Collaborative International Dictionary of English v.0.48&quot;</span><br><span class="line">Bash \Bash\, v. t. [imp. &amp; p. p. &#123;Bashed&#125;; p. pr. &amp; vb. n.</span><br><span class="line">   &#123;Bashing&#125;.] [Perh. of imitative origin; or cf. Dan. baske to</span><br><span class="line">   strike, bask a blow, Sw. basa to beat, bas a beating.]</span><br><span class="line">   To strike heavily; to beat; to crush. [Prov. Eng. &amp; Scot.]</span><br><span class="line">   --Hall Caine.</span><br><span class="line">   [1913 Webster]</span><br><span class="line"></span><br><span class="line">         Bash her open with a rock.               --Kipling.</span><br><span class="line">   [Webster 1913 Suppl.]</span><br><span class="line">.</span><br><span class="line">151 &quot;Bash&quot; gcide &quot;The Collaborative International Dictionary of English v.0.48&quot;</span><br><span class="line">Bash \Bash\, n.</span><br><span class="line">   1. a forceful blow, especially one that does damage to its</span><br><span class="line">      target.</span><br><span class="line">      [PJC]</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><p>Now you can see that it uses “The Collaborative International Dictionary of English”. There are many dictionaries are available. We can list all the dictionaries using</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ curl dict://dict.org/show:db</span><br><span class="line"></span><br><span class="line">jargon &quot;The Jargon File (version 4.4.7, 29 Dec 2003)&quot;</span><br><span class="line">foldoc &quot;The Free On-line Dictionary of Computing (26 July 2010)&quot;</span><br><span class="line">easton &quot;Easton&apos;s 1897 Bible Dictionary&quot;</span><br><span class="line">hitchcock &quot;Hitchcock&apos;s Bible Names Dictionary (late 1800&apos;s)&quot;</span><br><span class="line">bouvier &quot;Bouvier&apos;s Law Dictionary, Revised 6th Ed (1856)&quot;</span><br></pre></td></tr></table></figure><p>Now in-order to find the actual meaning of Bash in computer we can search for bash in “foldoc” dictionary as follows</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl dict://dict.org/d:bash:foldoc</span><br></pre></td></tr></table></figure><p>The result will be,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line">   Bourne Again SHell.  &#123;GNU&#125;&apos;s &#123;command interpreter&#125; for &#123;Unix&#125;.</span><br><span class="line">   Bash is a &#123;Posix&#125;-compatible &#123;shell&#125; with full &#123;Bourne shell&#125;</span><br><span class="line">   syntax, and some &#123;C shell&#125; commands built in.  The Bourne</span><br><span class="line">   Again Shell supports &#123;Emacs&#125;-style command-line editing, job</span><br><span class="line">   control, functions, and on-line help.  Written by Brian Fox of</span><br><span class="line">   &#123;UCSB&#125;.</span><br></pre></td></tr></table></figure><h2 id="Use-Proxy-to-Download-a-File"><a href="#Use-Proxy-to-Download-a-File" class="headerlink" title="Use Proxy to Download a File"></a>Use Proxy to Download a File</h2><p>We can specify cURL to use proxy to do the specific operation using -x option. We need to specify the host and port of the proxy.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -x proxysever.test.com:3128 http://google.co.in</span><br></pre></td></tr></table></figure><h2 id="Send-Mail-using-SMTP-Protocol"><a href="#Send-Mail-using-SMTP-Protocol" class="headerlink" title="Send Mail using SMTP Protocol"></a>Send Mail using SMTP Protocol</h2><p>cURL can also be used to send mail using the SMTP protocol. You should specify the from-address, to-address, and the mailserver ip-address as shown below.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl --mail-from blah@test.com --mail-rcpt foo@test.com smtp://mailserver.com</span><br></pre></td></tr></table></figure></p><p>Once the above command is entered, it will wait for the user to provide the data to mail. Once you’ve composed your message, type . (period) as the last line, which will send the email immediately.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Subject: Testing</span><br><span class="line">This is a test mail</span><br><span class="line">.</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Download-a-Single-File&quot;&gt;&lt;a href=&quot;#Download-a-Single-File&quot; class=&quot;headerlink&quot; title=&quot;Download a Single File&quot;&gt;&lt;/a&gt;Download a Single File&lt;/h2&gt;&lt;p&gt;The following command will get the content of the URL and display it in the STDOUT (i.e on your terminal).&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl http://www.centos.org&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;To store the output in a file, you an redirect it as shown below. This will also display some additional download statistics.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl http://www.centos.org &amp;gt; centos-org.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                 Dload  Upload   Total   Spent    Left  Speed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100 27329    0 27329    0     0   104k      0 --:--:-- --:--:-- --:--:--  167k&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://www.tgf21.com/tags/linux/"/>
    
      <category term="curl" scheme="http://www.tgf21.com/tags/curl/"/>
    
  </entry>
  
</feed>
